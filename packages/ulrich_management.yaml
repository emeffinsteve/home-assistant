# =================================================================
# PACKAGE: Ulrich Management System
# VERSION: 1.0.0
# CREATED: 2025-06-30
# AUTHOR: Steve Taylor
# 
# DESCRIPTION: Complete management system for Ulrich's room including:
# - Lighting automation with time-based timeouts
# - Internet task-based controls
# - Timer entities for lighting automation
# - Helper entities for task tracking
# - Template sensors for status monitoring
# =================================================================

# =================================================================
# TIMER ENTITIES
# =================================================================

timer:
  ulrich_light_timeout:
    name: "Ulrich Light Timeout"
    icon: mdi:timer-outline
    restore: true
    
  ulrichs_closet_timeout:
    name: "Ulrich's Closet Timeout"
    icon: mdi:timer-outline
    restore: true

# =================================================================
# INPUT BOOLEAN HELPERS
# =================================================================

input_boolean:
  ulrich_internet_paused:
    name: "Ulrich Internet Paused"
    initial: false
    icon: mdi:pause-circle

  ulrich_dog_walked_today:
    name: "Ulrich Dog Walked Today"
    initial: false
    icon: mdi:dog-walking

  ulrich_chores_done_today:
    name: "Ulrich Chores Done Today"
    initial: false
    icon: mdi:checkbox-marked-circle

# =================================================================
# TEMPLATE SENSORS
# =================================================================

template:
  - sensor:
      - name: "Ulrich Internet Status"
        unique_id: ulrich_internet_status_sensor
        state: >
          {% if is_state('input_boolean.ulrich_internet_paused', 'on') %}
            Manually Paused
          {% elif now().hour >= 10 and now().weekday() < 6 and is_state('input_boolean.ulrich_chores_done_today', 'off') %}
            Paused - Chores Not Done
          {% elif now().hour >= 20 and is_state('input_boolean.ulrich_dog_walked_today', 'off') %}
            Paused - Dog Not Walked
          {% else %}
            Normal - Internet Allowed
          {% endif %}
        availability: >
          {{ not is_state('switch.taylor_ulrich_paused', 'unavailable') }}
        icon: >
          {% set should_pause = (is_state('input_boolean.ulrich_internet_paused', 'on')) or
          (now().hour >= 10 and now().weekday() < 6 and is_state('input_boolean.ulrich_chores_done_today', 'off')) or
          (now().hour >= 20 and is_state('input_boolean.ulrich_dog_walked_today', 'off')) %}
          {% if should_pause %}
            mdi:wifi-off
          {% else %}
            mdi:wifi
          {% endif %}

      - name: "Ulrich Task Status"
        unique_id: ulrich_task_status_sensor
        state: >
          {% set dog_done = is_state('input_boolean.ulrich_dog_walked_today', 'on') %}
          {% set chores_done = is_state('input_boolean.ulrich_chores_done_today', 'on') %}
          {% if dog_done and chores_done %}
            All Tasks Complete
          {% elif dog_done %}
            Dog Walked - Chores Pending
          {% elif chores_done %}
            Chores Done - Dog Walk Pending
          {% else %}
            No Tasks Complete
          {% endif %}
        icon: >
          {% set dog_done = is_state('input_boolean.ulrich_dog_walked_today', 'on') %}
          {% set chores_done = is_state('input_boolean.ulrich_chores_done_today', 'on') %}
          {% if dog_done and chores_done %}
            mdi:check-circle
          {% elif dog_done or chores_done %}
            mdi:clock-outline
          {% else %}
            mdi:alert-circle
          {% endif %}

# =================================================================
# AUTOMATIONS
# =================================================================

automation:
  # =================================================================
  # LIGHTING AUTOMATIONS
  # =================================================================
  
  - id: '1748046513068'
    alias: Ulrich - School Night Lights
    description: 'Turn off Ulrich''s lights at 10:15 PM on school nights (Sun-Thu)'
    triggers:
    - trigger: time
      at: '22:15:00'
    conditions:
    - condition: time
      weekday:
      - thu
      - wed
      - tue
      - mon
      - sun
    actions:
    - parallel:
      - type: turn_off
        device_id: eb65058a7d6f73b656677c896d0736d9
        entity_id: 990ae60f235b9c46b03f070bdbbc5c3d
        domain: switch
      - type: turn_off
        device_id: 99d4677537141e7fb1ac1fa3ddf07ce6
        entity_id: b0a8da3ccba9fb86a642dad7c9f8c2f3
        domain: light
    mode: single

  - id: '1748046592492'
    alias: Ulrich - Weekend Nights
    description: 'Turn off Ulrich''s lights at 11:15 PM on weekends (Fri-Sat)'
    triggers:
    - trigger: time
      at: '23:15:00'
    conditions:
    - condition: time
      weekday:
      - fri
      - sat
    actions:
    - parallel:
      - type: turn_off
        device_id: eb65058a7d6f73b656677c896d0736d9
        entity_id: 990ae60f235b9c46b03f070bdbbc5c3d
        domain: switch
      - type: turn_off
        device_id: 99d4677537141e7fb1ac1fa3ddf07ce6
        entity_id: b0a8da3ccba9fb86a642dad7c9f8c2f3
        domain: light
    mode: single

  - id: '1749937317615'
    alias: Lighting Ulrich Bedroom Auto Timeout
    description: Automatically timeout Ulrich's bedroom lights based on time of day
    triggers:
    - entity_id:
      - light.ulrich_light
      - switch.ulrichs_closet
      to: 'on'
      id: light_turned_on
      trigger: state
    - event_type: timer.finished
      event_data:
        entity_id: timer.ulrich_light_timeout
      id: ulrich_light_timer_finished
      trigger: event
    - event_type: timer.finished
      event_data:
        entity_id: timer.ulrichs_closet_timeout
      id: ulrichs_closet_timer_finished
      trigger: event
    conditions: []
    actions:
    - choose:
      - conditions:
        - condition: trigger
          id: light_turned_on
        sequence:
        - data:
            name: Lighting Ulrich Bedroom Auto Timeout
            message: 'START: {{ trigger.entity_id }} turned on at {{ now().strftime(''%H:%M:%S'') }}'
          alias: Log trigger start
          action: logbook.log
        - variables:
            current_hour: '{{ now().hour }}'
            current_minute: '{{ now().minute }}'
            time_minutes: '{{ (current_hour | int * 60) + (current_minute | int) }}'
            morning_start: 330
            morning_end: 540
            day_end: 1080
            evening_end: 1320
            entity_timer: "{% if trigger.entity_id == 'light.ulrich_light' %}\n  timer.ulrich_light_timeout\n{% else %}\n  timer.ulrichs_closet_timeout\n{% endif %}"
          alias: Set time variables
        - data:
            name: Lighting Ulrich Bedroom Auto Timeout
            message: 'DECISION: Current time {{ current_hour }}:{{ ''%02d''|format(current_minute) }}  ({{ time_minutes }} minutes), entity {{ trigger.entity_id }}'
          alias: Log time calculation
          action: logbook.log
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ time_minutes >= morning_start and time_minutes < morning_end }}'
            sequence:
            - target:
                entity_id: '{{ entity_timer }}'
              data:
                duration: 00:45:00
              alias: Start 45 minute timer
              action: timer.start
            - data:
                name: Lighting Ulrich Bedroom Auto Timeout
                message: 'STATE: Morning period - started 45 minute timer for {{ trigger.entity_id }}'
              alias: Log morning timer start
              action: logbook.log
          - conditions:
            - condition: template
              value_template: '{{ time_minutes >= morning_end and time_minutes < day_end }}'
            sequence:
            - target:
                entity_id: '{{ entity_timer }}'
              data:
                duration: 00:15:00
              alias: Start 15 minute timer
              action: timer.start
            - data:
                name: Lighting Ulrich Bedroom Auto Timeout
                message: 'STATE: Day period - started 15 minute timer for {{ trigger.entity_id }}'
              alias: Log day timer start
              action: logbook.log
          - conditions:
            - condition: template
              value_template: '{{ time_minutes >= day_end and time_minutes < evening_end }}'
            sequence:
            - target:
                entity_id: '{{ entity_timer }}'
              data:
                duration: 01:00:00
              alias: Start 60 minute timer
              action: timer.start
            - data:
                name: Lighting Ulrich Bedroom Auto Timeout
                message: 'STATE: Evening period - started 60 minute timer for {{ trigger.entity_id }}'
              alias: Log evening timer start
              action: logbook.log
          - conditions:
            - condition: template
              value_template: '{{ time_minutes >= evening_end or time_minutes < morning_start }}'
            sequence:
            - target:
                entity_id: '{{ entity_timer }}'
              data:
                duration: 00:00:15
              alias: Start 15 second timer
              action: timer.start
            - data:
                name: Lighting Ulrich Bedroom Auto Timeout
                message: 'STATE: Night period - started 15 second timer for {{ trigger.entity_id }}'
              alias: Log night timer start
              action: logbook.log
          default:
          - data:
              name: Lighting Ulrich Bedroom Auto Timeout
              message: 'ERROR: Unable to determine time period for {{ trigger.entity_id }}'
            alias: Log time period error
            action: logbook.log
          - data:
              title: Ulrich Bedroom Lighting Error
              message: Failed to determine time period for {{ trigger.entity_id }}  at {{ now().strftime('%H:%M:%S') }}
            alias: Create error notification
            action: persistent_notification.create
      - conditions:
        - condition: trigger
          id:
          - ulrich_light_timer_finished
          - ulrichs_closet_timer_finished
        sequence:
        - variables:
            target_entity: "{% if trigger.id == 'ulrich_light_timer_finished' %}\n  light.ulrich_light\n{% else %}\n  switch.ulrichs_closet\n{% endif %}"
          alias: Set target entity
        - data:
            name: Lighting Ulrich Bedroom Auto Timeout
            message: 'DECISION: Timer finished for {{ target_entity }}, checking if still on'
          alias: Log timer finished
          action: logbook.log
        - condition: template
          value_template: '{{ states(target_entity) == ''on'' }}'
          alias: Check if light still on
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ target_entity.startswith(''light.'') }}'
            sequence:
            - target:
                entity_id: '{{ target_entity }}'
              alias: Turn off light
              action: light.turn_off
          - conditions:
            - condition: template
              value_template: '{{ target_entity.startswith(''switch.'') }}'
            sequence:
            - target:
                entity_id: '{{ target_entity }}'
              alias: Turn off switch
              action: switch.turn_off
          default:
          - data:
              name: Lighting Ulrich Bedroom Auto Timeout
              message: 'ERROR: Unknown entity type {{ target_entity }}'
            alias: Log entity type error
            action: logbook.log
          - data:
              title: Ulrich Bedroom Lighting Error
              message: Unknown entity type {{ target_entity }} in automation
            alias: Create entity type error notification
            action: persistent_notification.create
        - data:
            name: Lighting Ulrich Bedroom Auto Timeout
            message: 'SUCCESS: {{ target_entity }} automatically turned off after timeout'
          alias: Log successful shutoff
          action: logbook.log
      default:
      - data:
          name: Lighting Ulrich Bedroom Auto Timeout
          message: 'ERROR: Unknown trigger condition {{ trigger.id if trigger.id is defined else ''undefined'' }}'
        alias: Log unknown trigger error
        action: logbook.log
      - data:
          title: Ulrich Bedroom Lighting Error
          message: Unknown trigger condition in automation at {{ now().strftime('%H:%M:%S') }}
        alias: Create unknown trigger notification
        action: persistent_notification.create
    mode: parallel
    max: 10

  # =================================================================
  # INTERNET MANAGEMENT AUTOMATIONS
  # =================================================================

  - id: ulrich_manual_control
    alias: "Internet: Ulrich Manual Control"
    description: "Handle Ulrich's manual internet pause/resume"
    triggers:
    - entity_id: input_boolean.ulrich_internet_paused
      trigger: state
    conditions: []
    actions:
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ is_state(''input_boolean.ulrich_internet_paused'', ''on'') }}'
        sequence:
        - target:
            entity_id: switch.taylor_ulrich_paused
          data: {}
          action: switch.turn_on
        - data:
            name: "ULRICH MANUAL CONTROL"
            message: "Internet Control: Ulrich manually paused"
          action: logbook.log
      - conditions:
        - condition: template
          value_template: '{{ is_state(''input_boolean.ulrich_internet_paused'', ''off'') }}'
        sequence:
        - target:
            entity_id: switch.taylor_ulrich_paused
          data: {}
          action: switch.turn_off
        - data:
            name: "ULRICH MANUAL CONTROL"
            message: "Internet Control: Ulrich manually resumed"
          action: logbook.log
    mode: single

  - id: ulrich_chores_check_10am
    alias: "Internet: Ulrich Chores Check (10AM Mon-Sat)"
    description: "Pause Ulrich's internet if chores not done by 10 AM Monday-Saturday"
    triggers:
    - trigger: time
      at: '10:00:00'
    conditions:
    - condition: time
      weekday:
      - mon
      - tue
      - wed
      - thu
      - fri
      - sat
    - condition: template
      value_template: '{{ is_state(''input_boolean.ulrich_chores_done_today'', ''off'') }}'
    - condition: template
      value_template: "{{ not is_state('input_boolean.ulrich_internet_paused', 'on') }}"
    actions:
    - data:
        name: "ULRICH CHORES CHECK"
        message: "START: Checking Ulrich's chores at 10:00 AM"
      action: logbook.log
    - target:
        entity_id: switch.taylor_ulrich_paused
      data: {}
      action: switch.turn_on
    - data:
        title: "Ulrich's Internet Paused"
        message: "Chores not completed by 10:00 AM - internet paused until chores are done"
        notification_id: "ulrich_chores_reminder"
      action: persistent_notification.create
    - data:
        name: "ULRICH CHORES CHECK"
        message: "SUCCESS: Ulrich's internet paused due to incomplete chores"
      action: logbook.log
    mode: single

  - id: ulrich_dog_walk_check_8pm
    alias: "Internet: Ulrich Dog Walk Check (8PM Daily)"
    description: "Pause Ulrich's internet if dog not walked by 8 PM daily"
    triggers:
    - trigger: time
      at: '20:00:00'
    conditions:
    - condition: template
      value_template: '{{ is_state(''input_boolean.ulrich_dog_walked_today'', ''off'') }}'
    - condition: template
      value_template: "{{ not is_state('input_boolean.ulrich_internet_paused', 'on') }}"
    actions:
    - data:
        name: "ULRICH DOG WALK CHECK"
        message: "START: Checking Ulrich's dog walk at 8:00 PM"
      action: logbook.log
    - target:
        entity_id: switch.taylor_ulrich_paused
      data: {}
      action: switch.turn_on
    - data:
        title: "Ulrich's Internet Paused"
        message: "Dog not walked by 8:00 PM - internet paused until dog is walked"
        notification_id: "ulrich_dog_walk_reminder"
      action: persistent_notification.create
    - data:
        name: "ULRICH DOG WALK CHECK"
        message: "SUCCESS: Ulrich's internet paused due to incomplete dog walk"
      action: logbook.log
    mode: single

  - id: ulrich_task_completion_handler
    alias: "Internet: Ulrich Task Completion Handler"
    description: "Automatically restore Ulrich's internet when tasks are completed"
    triggers:
    - entity_id: input_boolean.ulrich_chores_done_today
      trigger: state
    - entity_id: input_boolean.ulrich_dog_walked_today
      trigger: state
    conditions:
    - condition: template
      value_template: '{{ trigger.to_state.state == ''on'' }}'
    - condition: template
      value_template: "{{ not is_state('input_boolean.ulrich_internet_paused', 'on') }}"
    actions:
    - data:
        name: "ULRICH TASK COMPLETION"
        message: "START: Task completion detected for {{ trigger.to_state.name }}"
      action: logbook.log
    - variables:
        chores_done: '{{ is_state(''input_boolean.ulrich_chores_done_today'', ''on'') }}'
        dog_done: '{{ is_state(''input_boolean.ulrich_dog_walked_today'', ''on'') }}'
        current_hour: '{{ now().hour }}'
        current_weekday: '{{ now().weekday() }}'
      alias: Set variables
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ chores_done and dog_done }}'
        sequence:
        - target:
            entity_id: switch.taylor_ulrich_paused
          data: {}
          action: switch.turn_off
        - data:
            title: "Ulrich's Internet Restored"
            message: "All tasks completed - internet access restored"
            notification_id: "{{ 'ulrich_chores_reminder' if 'chores' in trigger.to_state.name else 'ulrich_dog_walk_reminder' }}"
          action: persistent_notification.create
        - data:
            name: "ULRICH TASK COMPLETION"
            message: "SUCCESS: All tasks complete - Ulrich's internet restored"
          action: logbook.log
      - conditions:
        - condition: template
          value_template: '{{ chores_done and not dog_done and current_hour < 20 }}'
        sequence:
        - data:
            name: "ULRICH TASK COMPLETION"
            message: "INFO: Chores done, dog walk pending (before 8 PM)"
          action: logbook.log
      - conditions:
        - condition: template
          value_template: '{{ dog_done and not chores_done and current_hour < 10 and current_weekday < 6 }}'
        sequence:
        - data:
            name: "ULRICH TASK COMPLETION"
            message: "INFO: Dog walked, chores pending (before 10 AM on weekdays)"
          action: logbook.log
      default:
      - data:
          name: "ULRICH TASK COMPLETION"
          message: "INFO: Partial task completion - waiting for all tasks"
        action: logbook.log
    mode: single 