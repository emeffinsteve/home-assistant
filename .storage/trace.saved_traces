{
  "version": 1,
  "minor_version": 1,
  "key": "trace.saved_traces",
  "data": {
    "automation.weather_forecast_polling_system": [
      {
        "extended_dict": {
          "last_step": "action/1/then/3",
          "run_id": "9019d6c87584a82fb925f45c717888ce",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:05:06.551164+00:00",
            "finish": "2025-07-04T18:05:06.553479+00:00"
          },
          "domain": "automation",
          "item_id": "weather_forecast_polling_system",
          "trigger": "Home Assistant starting",
          "trace": {
            "trigger/1": [
              {
                "path": "trigger/1",
                "timestamp": "2025-07-04T18:05:06.551185+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.weather_forecast_polling_system",
                    "state": "on",
                    "attributes": {
                      "id": "weather_forecast_polling_system",
                      "last_triggered": "2025-07-03T00:18:48.981666+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Weather Forecast Polling System"
                    },
                    "last_changed": "2025-07-04T18:04:56.733489+00:00",
                    "last_reported": "2025-07-04T18:04:56.733489+00:00",
                    "last_updated": "2025-07-04T18:04:56.733489+00:00",
                    "context": {
                      "id": "01JZB9ST0XW37YJGX5D6EC1X5B",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "1",
                    "idx": "1",
                    "alias": null,
                    "platform": "homeassistant",
                    "event": "start",
                    "description": "Home Assistant starting"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:05:06.551201+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.551209+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "action/0": [
              {
                "path": "action/0",
                "timestamp": "2025-07-04T18:05:06.551312+00:00",
                "changed_variables": {
                  "context": {
                    "id": "01JZB9T3KQ29W3NT4XKT8M2S0S",
                    "parent_id": null,
                    "user_id": null
                  },
                  "weather_data": {
                    "weather.kakr": {
                      "forecast": [
                        {
                          "datetime": "2025-07-04T09:00:00-04:00",
                          "precipitation_probability": 0,
                          "is_daytime": true,
                          "condition": "partlycloudy",
                          "wind_bearing": 225.0,
                          "temperature": 87,
                          "wind_speed": 3.0
                        },
                        {
                          "datetime": "2025-07-04T18:00:00-04:00",
                          "precipitation_probability": 8,
                          "is_daytime": false,
                          "condition": "partlycloudy",
                          "wind_bearing": 90.0,
                          "temperature": 66,
                          "wind_speed": 3.0
                        },
                        {
                          "datetime": "2025-07-05T06:00:00-04:00",
                          "precipitation_probability": 14,
                          "is_daytime": true,
                          "condition": "partlycloudy",
                          "wind_bearing": 225.0,
                          "temperature": 90,
                          "wind_speed": 5.0
                        },
                        {
                          "datetime": "2025-07-05T18:00:00-04:00",
                          "precipitation_probability": 14,
                          "is_daytime": false,
                          "condition": "partlycloudy",
                          "wind_bearing": 180.0,
                          "temperature": 68,
                          "wind_speed": 6.0
                        },
                        {
                          "datetime": "2025-07-06T06:00:00-04:00",
                          "precipitation_probability": 18,
                          "is_daytime": true,
                          "condition": "lightning-rainy",
                          "wind_bearing": 225.0,
                          "temperature": 92,
                          "wind_speed": 10.0
                        },
                        {
                          "datetime": "2025-07-06T18:00:00-04:00",
                          "precipitation_probability": 18,
                          "is_daytime": false,
                          "condition": "lightning-rainy",
                          "wind_bearing": 225.0,
                          "temperature": 71,
                          "wind_speed": 8.5
                        },
                        {
                          "datetime": "2025-07-07T06:00:00-04:00",
                          "precipitation_probability": 52,
                          "is_daytime": true,
                          "condition": "lightning-rainy",
                          "wind_bearing": 270.0,
                          "temperature": 87,
                          "wind_speed": 6.5
                        },
                        {
                          "datetime": "2025-07-07T18:00:00-04:00",
                          "precipitation_probability": 52,
                          "is_daytime": false,
                          "condition": "lightning-rainy",
                          "wind_bearing": 315.0,
                          "temperature": 65,
                          "wind_speed": 4.5
                        },
                        {
                          "datetime": "2025-07-08T06:00:00-04:00",
                          "precipitation_probability": 14,
                          "is_daytime": true,
                          "condition": "partlycloudy",
                          "wind_bearing": 315.0,
                          "temperature": 84,
                          "wind_speed": 4.5
                        },
                        {
                          "datetime": "2025-07-08T18:00:00-04:00",
                          "precipitation_probability": 12,
                          "is_daytime": false,
                          "condition": "partlycloudy",
                          "wind_bearing": 45.0,
                          "temperature": 64,
                          "wind_speed": 4.5
                        },
                        {
                          "datetime": "2025-07-09T06:00:00-04:00",
                          "precipitation_probability": 30,
                          "is_daytime": true,
                          "condition": "lightning-rainy",
                          "wind_bearing": 270.0,
                          "temperature": 84,
                          "wind_speed": 4.5
                        },
                        {
                          "datetime": "2025-07-09T18:00:00-04:00",
                          "precipitation_probability": 32,
                          "is_daytime": false,
                          "condition": "lightning-rainy",
                          "wind_bearing": 0.0,
                          "temperature": 65,
                          "wind_speed": 5.0
                        },
                        {
                          "datetime": "2025-07-10T06:00:00-04:00",
                          "precipitation_probability": 49,
                          "is_daytime": true,
                          "condition": "lightning-rainy",
                          "wind_bearing": 315.0,
                          "temperature": 83,
                          "wind_speed": 5.5
                        },
                        {
                          "datetime": "2025-07-10T18:00:00-04:00",
                          "precipitation_probability": 49,
                          "is_daytime": false,
                          "condition": "lightning-rainy",
                          "wind_bearing": 0.0,
                          "temperature": 62,
                          "wind_speed": 5.0
                        }
                      ]
                    }
                  }
                },
                "result": {
                  "params": {
                    "domain": "weather",
                    "service": "get_forecasts",
                    "service_data": {
                      "type": "twice_daily",
                      "entity_id": [
                        "weather.kakr"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "weather.kakr"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1": [
              {
                "path": "action/1",
                "timestamp": "2025-07-04T18:05:06.551888+00:00",
                "changed_variables": {
                  "forecast_list": [
                    {
                      "datetime": "2025-07-04T09:00:00-04:00",
                      "precipitation_probability": 0,
                      "is_daytime": true,
                      "condition": "partlycloudy",
                      "wind_bearing": 225.0,
                      "temperature": 87,
                      "wind_speed": 3.0
                    },
                    {
                      "datetime": "2025-07-04T18:00:00-04:00",
                      "precipitation_probability": 8,
                      "is_daytime": false,
                      "condition": "partlycloudy",
                      "wind_bearing": 90.0,
                      "temperature": 66,
                      "wind_speed": 3.0
                    },
                    {
                      "datetime": "2025-07-05T06:00:00-04:00",
                      "precipitation_probability": 14,
                      "is_daytime": true,
                      "condition": "partlycloudy",
                      "wind_bearing": 225.0,
                      "temperature": 90,
                      "wind_speed": 5.0
                    },
                    {
                      "datetime": "2025-07-05T18:00:00-04:00",
                      "precipitation_probability": 14,
                      "is_daytime": false,
                      "condition": "partlycloudy",
                      "wind_bearing": 180.0,
                      "temperature": 68,
                      "wind_speed": 6.0
                    },
                    {
                      "datetime": "2025-07-06T06:00:00-04:00",
                      "precipitation_probability": 18,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 225.0,
                      "temperature": 92,
                      "wind_speed": 10.0
                    },
                    {
                      "datetime": "2025-07-06T18:00:00-04:00",
                      "precipitation_probability": 18,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 225.0,
                      "temperature": 71,
                      "wind_speed": 8.5
                    },
                    {
                      "datetime": "2025-07-07T06:00:00-04:00",
                      "precipitation_probability": 52,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 270.0,
                      "temperature": 87,
                      "wind_speed": 6.5
                    },
                    {
                      "datetime": "2025-07-07T18:00:00-04:00",
                      "precipitation_probability": 52,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 315.0,
                      "temperature": 65,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-08T06:00:00-04:00",
                      "precipitation_probability": 14,
                      "is_daytime": true,
                      "condition": "partlycloudy",
                      "wind_bearing": 315.0,
                      "temperature": 84,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-08T18:00:00-04:00",
                      "precipitation_probability": 12,
                      "is_daytime": false,
                      "condition": "partlycloudy",
                      "wind_bearing": 45.0,
                      "temperature": 64,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-09T06:00:00-04:00",
                      "precipitation_probability": 30,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 270.0,
                      "temperature": 84,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-09T18:00:00-04:00",
                      "precipitation_probability": 32,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 0.0,
                      "temperature": 65,
                      "wind_speed": 5.0
                    },
                    {
                      "datetime": "2025-07-10T06:00:00-04:00",
                      "precipitation_probability": 49,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 315.0,
                      "temperature": 83,
                      "wind_speed": 5.5
                    },
                    {
                      "datetime": "2025-07-10T18:00:00-04:00",
                      "precipitation_probability": 49,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 0.0,
                      "temperature": 62,
                      "wind_speed": 5.0
                    }
                  ],
                  "tomorrow_str": "2025-07-05",
                  "tomorrow_high": 90,
                  "hot_days_found": "No hot days in forecast"
                },
                "result": {
                  "choice": "then"
                }
              }
            ],
            "action/1/if": [
              {
                "path": "action/1/if",
                "timestamp": "2025-07-04T18:05:06.551932+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/1/if/condition/0": [
              {
                "path": "action/1/if/condition/0",
                "timestamp": "2025-07-04T18:05:06.551948+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/1/then/0": [
              {
                "path": "action/1/then/0",
                "timestamp": "2025-07-04T18:05:06.552064+00:00",
                "changed_variables": {
                  "forecast_list": [
                    {
                      "datetime": "2025-07-04T09:00:00-04:00",
                      "precipitation_probability": 0,
                      "is_daytime": true,
                      "condition": "partlycloudy",
                      "wind_bearing": 225.0,
                      "temperature": 87,
                      "wind_speed": 3.0
                    },
                    {
                      "datetime": "2025-07-04T18:00:00-04:00",
                      "precipitation_probability": 8,
                      "is_daytime": false,
                      "condition": "partlycloudy",
                      "wind_bearing": 90.0,
                      "temperature": 66,
                      "wind_speed": 3.0
                    },
                    {
                      "datetime": "2025-07-05T06:00:00-04:00",
                      "precipitation_probability": 14,
                      "is_daytime": true,
                      "condition": "partlycloudy",
                      "wind_bearing": 225.0,
                      "temperature": 90,
                      "wind_speed": 5.0
                    },
                    {
                      "datetime": "2025-07-05T18:00:00-04:00",
                      "precipitation_probability": 14,
                      "is_daytime": false,
                      "condition": "partlycloudy",
                      "wind_bearing": 180.0,
                      "temperature": 68,
                      "wind_speed": 6.0
                    },
                    {
                      "datetime": "2025-07-06T06:00:00-04:00",
                      "precipitation_probability": 18,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 225.0,
                      "temperature": 92,
                      "wind_speed": 10.0
                    },
                    {
                      "datetime": "2025-07-06T18:00:00-04:00",
                      "precipitation_probability": 18,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 225.0,
                      "temperature": 71,
                      "wind_speed": 8.5
                    },
                    {
                      "datetime": "2025-07-07T06:00:00-04:00",
                      "precipitation_probability": 52,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 270.0,
                      "temperature": 87,
                      "wind_speed": 6.5
                    },
                    {
                      "datetime": "2025-07-07T18:00:00-04:00",
                      "precipitation_probability": 52,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 315.0,
                      "temperature": 65,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-08T06:00:00-04:00",
                      "precipitation_probability": 14,
                      "is_daytime": true,
                      "condition": "partlycloudy",
                      "wind_bearing": 315.0,
                      "temperature": 84,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-08T18:00:00-04:00",
                      "precipitation_probability": 12,
                      "is_daytime": false,
                      "condition": "partlycloudy",
                      "wind_bearing": 45.0,
                      "temperature": 64,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-09T06:00:00-04:00",
                      "precipitation_probability": 30,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 270.0,
                      "temperature": 84,
                      "wind_speed": 4.5
                    },
                    {
                      "datetime": "2025-07-09T18:00:00-04:00",
                      "precipitation_probability": 32,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 0.0,
                      "temperature": 65,
                      "wind_speed": 5.0
                    },
                    {
                      "datetime": "2025-07-10T06:00:00-04:00",
                      "precipitation_probability": 49,
                      "is_daytime": true,
                      "condition": "lightning-rainy",
                      "wind_bearing": 315.0,
                      "temperature": 83,
                      "wind_speed": 5.5
                    },
                    {
                      "datetime": "2025-07-10T18:00:00-04:00",
                      "precipitation_probability": 49,
                      "is_daytime": false,
                      "condition": "lightning-rainy",
                      "wind_bearing": 0.0,
                      "temperature": 62,
                      "wind_speed": 5.0
                    }
                  ],
                  "tomorrow_str": "2025-07-05",
                  "tomorrow_high": 90
                }
              }
            ],
            "action/1/then/1": [
              {
                "path": "action/1/then/1",
                "timestamp": "2025-07-04T18:05:06.552751+00:00",
                "result": {
                  "choice": "then"
                }
              }
            ],
            "action/1/then/1/if": [
              {
                "path": "action/1/then/1/if",
                "timestamp": "2025-07-04T18:05:06.552788+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/1/then/1/if/condition/0": [
              {
                "path": "action/1/then/1/if/condition/0",
                "timestamp": "2025-07-04T18:05:06.552804+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/1/then/1/then/0": [
              {
                "path": "action/1/then/1/then/0",
                "timestamp": "2025-07-04T18:05:06.552879+00:00",
                "result": {
                  "params": {
                    "domain": "input_number",
                    "service": "set_value",
                    "service_data": {
                      "value": 90,
                      "entity_id": [
                        "input_number.weather_forecast_today_high"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_number.weather_forecast_today_high"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/then/1/then/1": [
              {
                "path": "action/1/then/1/then/1",
                "timestamp": "2025-07-04T18:05:06.553051+00:00",
                "result": {
                  "params": {
                    "domain": "logbook",
                    "service": "log",
                    "service_data": {
                      "name": "Weather Forecast Polling System",
                      "message": "SUCCESS: Tomorrow's high updated to 90\u00b0F  - PRE-COOLING WILL TRIGGER at 6 AM"
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/then/2": [
              {
                "path": "action/1/then/2",
                "timestamp": "2025-07-04T18:05:06.553156+00:00",
                "changed_variables": {
                  "hot_days_found": "No hot days in forecast"
                }
              }
            ],
            "action/1/then/3": [
              {
                "path": "action/1/then/3",
                "timestamp": "2025-07-04T18:05:06.553303+00:00",
                "result": {
                  "params": {
                    "domain": "input_text",
                    "service": "set_value",
                    "service_data": {
                      "value": "No hot days in forecast",
                      "entity_id": [
                        "input_text.weather_hot_days_ahead"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_text.weather_hot_days_ahead"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ]
          },
          "config": {
            "alias": "Weather Forecast Polling System",
            "description": "Polls KAKR weather service and extracts tomorrow's high temperature",
            "id": "weather_forecast_polling_system",
            "triggers": [
              {
                "platform": "time_pattern",
                "minutes": 30
              },
              {
                "platform": "homeassistant",
                "event": "start"
              },
              {
                "platform": "state",
                "entity_id": "weather.kakr"
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              }
            ],
            "actions": [
              {
                "alias": "Get KAKR Weather Forecast",
                "target": {
                  "entity_id": "weather.kakr"
                },
                "data": {
                  "type": "twice_daily"
                },
                "response_variable": "weather_data",
                "action": "weather.get_forecasts"
              },
              {
                "alias": "Process Forecast Data",
                "if": [
                  {
                    "condition": "template",
                    "value_template": "{{ weather_data.get('weather.kakr', {}).get('forecast', [])|length > 0 }}\n"
                  }
                ],
                "then": [
                  {
                    "alias": "Extract Tomorrow's High Temperature",
                    "variables": {
                      "forecast_list": "{{ weather_data['weather.kakr']['forecast'] }}",
                      "tomorrow_str": "{{ (now() + timedelta(days=1)).strftime('%Y-%m-%d') }}",
                      "tomorrow_high": "{% for period in forecast_list %}\n  {% if period.datetime.startswith(tomorrow_str) and period.get('is_daytime', true) %}\n    {{ period.temperature }}\n    {% break %}\n  {% endif %}\n{% endfor %}\n"
                    }
                  },
                  {
                    "alias": "Update Tomorrow High Temperature",
                    "if": [
                      {
                        "condition": "template",
                        "value_template": "{{ tomorrow_high != '' and tomorrow_high | int(0) > 0 }}"
                      }
                    ],
                    "then": [
                      {
                        "alias": "Store Tomorrow's High",
                        "target": {
                          "entity_id": "input_number.weather_forecast_today_high"
                        },
                        "data": {
                          "value": "{{ tomorrow_high }}"
                        },
                        "action": "input_number.set_value"
                      },
                      {
                        "alias": "Log Forecast Success",
                        "data": {
                          "name": "Weather Forecast Polling System",
                          "message": "SUCCESS: Tomorrow's high updated to {{ tomorrow_high }}\u00b0F {% if tomorrow_high | int(0) >= 86 %} - PRE-COOLING WILL TRIGGER at 6 AM {% else %} - Normal day, no pre-cooling needed {% endif %}\n"
                        },
                        "action": "logbook.log"
                      }
                    ],
                    "else": [
                      {
                        "alias": "Log Forecast Failure",
                        "data": {
                          "name": "Weather Forecast Polling System",
                          "message": "ERROR: Could not extract valid tomorrow high temperature from forecast data"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "alias": "Calculate Hot Days List",
                    "variables": {
                      "hot_days_found": "{% set hot_list = [] %} {% for period in forecast_list %}\n  {% if period.get('is_daytime', true) and period.temperature >= 86 %}\n    {% set date_str = (period.datetime | as_datetime).strftime('%m/%d') %}\n    {% set temp_str = period.temperature | string + '\u00b0F' %}\n    {% set hot_list = hot_list + [date_str + ': ' + temp_str] %}\n  {% endif %}\n{% endfor %} {{ hot_list[:5] | join(', ') if hot_list else 'No hot days in forecast' }}\n"
                    }
                  },
                  {
                    "alias": "Store Hot Days List",
                    "target": {
                      "entity_id": "input_text.weather_hot_days_ahead"
                    },
                    "data": {
                      "value": "{{ hot_days_found }}"
                    },
                    "action": "input_text.set_value"
                  }
                ],
                "else": [
                  {
                    "alias": "Log No Forecast Data",
                    "data": {
                      "name": "Weather Forecast Polling System",
                      "message": "ERROR: No forecast data available from weather.kakr"
                    },
                    "action": "logbook.log"
                  }
                ]
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZB9T3KQ29W3NT4XKT8M2S0S",
            "parent_id": null,
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "action/1/then/3",
          "run_id": "9019d6c87584a82fb925f45c717888ce",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:05:06.551164+00:00",
            "finish": "2025-07-04T18:05:06.553479+00:00"
          },
          "domain": "automation",
          "item_id": "weather_forecast_polling_system",
          "trigger": "Home Assistant starting"
        }
      }
    ],
    "automation.climate_sensor_manager": [
      {
        "extended_dict": {
          "last_step": "action/2",
          "run_id": "34bbf53f22b01713a9d3d59e0bec5d10",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:05:06.553613+00:00",
            "finish": "2025-07-04T18:05:06.557670+00:00"
          },
          "domain": "automation",
          "item_id": "climate_sensor_manager",
          "trigger": "Home Assistant starting",
          "trace": {
            "trigger/3": [
              {
                "path": "trigger/3",
                "timestamp": "2025-07-04T18:05:06.553624+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_sensor_manager",
                    "state": "on",
                    "attributes": {
                      "id": "climate_sensor_manager",
                      "last_triggered": "2025-07-03T00:28:46.828144+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Sensor Manager"
                    },
                    "last_changed": "2025-07-04T18:04:56.733517+00:00",
                    "last_reported": "2025-07-04T18:04:56.733517+00:00",
                    "last_updated": "2025-07-04T18:04:56.733517+00:00",
                    "context": {
                      "id": "01JZB9ST0XCB5CCQD0CAGVJB8R",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "3",
                    "idx": "3",
                    "alias": null,
                    "platform": "homeassistant",
                    "event": "start",
                    "description": "Home Assistant starting"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:05:06.553631+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.553636+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "action/0": [
              {
                "path": "action/0",
                "timestamp": "2025-07-04T18:05:06.553687+00:00",
                "changed_variables": {
                  "context": {
                    "id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                    "parent_id": null,
                    "user_id": null
                  },
                  "primary_temp_raw": 89.42,
                  "primary_available": true,
                  "primary_temp": 89.42,
                  "primary_valid_range": true,
                  "weather_temp_raw": 83,
                  "weather_available": true,
                  "weather_temp": 83.0,
                  "weather_valid_range": true,
                  "indoor_temp": 70.16,
                  "primary_usable": true
                }
              }
            ],
            "action/1": [
              {
                "path": "action/1",
                "timestamp": "2025-07-04T18:05:06.553866+00:00",
                "result": {
                  "choice": 0
                }
              }
            ],
            "action/1/choose/0": [
              {
                "path": "action/1/choose/0",
                "timestamp": "2025-07-04T18:05:06.553911+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/1/choose/0/conditions/0": [
              {
                "path": "action/1/choose/0/conditions/0",
                "timestamp": "2025-07-04T18:05:06.553933+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/1/choose/0/sequence/0": [
              {
                "path": "action/1/choose/0/sequence/0",
                "timestamp": "2025-07-04T18:05:06.554002+00:00",
                "result": {
                  "params": {
                    "domain": "input_number",
                    "service": "set_value",
                    "service_data": {
                      "value": 89.42,
                      "entity_id": [
                        "input_number.climate_outdoor_temperature_best"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_number.climate_outdoor_temperature_best"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/choose/0/sequence/1": [
              {
                "path": "action/1/choose/0/sequence/1",
                "timestamp": "2025-07-04T18:05:06.554382+00:00",
                "result": {
                  "params": {
                    "domain": "input_select",
                    "service": "select_option",
                    "service_data": {
                      "option": "primary_sensor",
                      "entity_id": [
                        "input_select.climate_outdoor_data_source"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_select.climate_outdoor_data_source"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/choose/0/sequence/2": [
              {
                "path": "action/1/choose/0/sequence/2",
                "timestamp": "2025-07-04T18:05:06.554487+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "input_boolean.climate_outdoor_sensors_available"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/choose/0/sequence/3": [
              {
                "path": "action/1/choose/0/sequence/3",
                "timestamp": "2025-07-04T18:05:06.554575+00:00",
                "result": {
                  "params": {
                    "domain": "input_text",
                    "service": "set_value",
                    "service_data": {
                      "value": "Primary sensor: 89.42\u00b0F - OK",
                      "entity_id": [
                        "input_text.climate_sensor_status"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_text.climate_sensor_status"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/2": [
              {
                "path": "action/2",
                "timestamp": "2025-07-04T18:05:06.554736+00:00",
                "result": {
                  "params": {
                    "domain": "input_datetime",
                    "service": "set_datetime",
                    "service_data": {
                      "datetime": "2025-07-04 14:05:06.554785-04:00",
                      "entity_id": [
                        "input_datetime.climate_last_outdoor_reading"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_datetime.climate_last_outdoor_reading"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Sensor Manager",
            "description": "Manages outdoor temperature source priority",
            "id": "climate_sensor_manager",
            "triggers": [
              {
                "platform": "state",
                "entity_id": "sensor.outdoor_sensor_temperature"
              },
              {
                "platform": "state",
                "entity_id": "weather.kakr",
                "attribute": "temperature"
              },
              {
                "platform": "time_pattern",
                "minutes": 2
              },
              {
                "platform": "homeassistant",
                "event": "start"
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              }
            ],
            "actions": [
              {
                "alias": "Evaluate Sensor Hierarchy",
                "variables": {
                  "primary_temp_raw": "{{ states('sensor.outdoor_sensor_temperature') }}",
                  "primary_available": "{{ primary_temp_raw not in ['unknown', 'unavailable', 'none'] and \n   primary_temp_raw | float(0) != 0 }}\n",
                  "primary_temp": "{{ primary_temp_raw | float(0) if primary_available else 0 }}",
                  "primary_valid_range": "{{ primary_temp > 0 and primary_temp < 120 }}",
                  "weather_temp_raw": "{{ state_attr('weather.kakr', 'temperature') }}",
                  "weather_available": "{{ weather_temp_raw is not none and weather_temp_raw not in ['unknown', 'unavailable'] }}",
                  "weather_temp": "{{ weather_temp_raw | float(0) if weather_available else 0 }}",
                  "weather_valid_range": "{{ weather_temp > 0 and weather_temp < 120 }}",
                  "indoor_temp": "{{ states('sensor.my_ecobee_current_temperature') | float(70) }}",
                  "primary_usable": "{{ primary_available and primary_valid_range }}"
                }
              },
              {
                "alias": "Determine Best Data Source",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ primary_usable }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Use Primary Sensor",
                        "target": {
                          "entity_id": "input_number.climate_outdoor_temperature_best"
                        },
                        "data": {
                          "value": "{{ primary_temp }}"
                        },
                        "action": "input_number.set_value"
                      },
                      {
                        "alias": "Set Primary Source",
                        "target": {
                          "entity_id": "input_select.climate_outdoor_data_source"
                        },
                        "data": {
                          "option": "primary_sensor"
                        },
                        "action": "input_select.select_option"
                      },
                      {
                        "alias": "Set Sensors Available",
                        "target": {
                          "entity_id": "input_boolean.climate_outdoor_sensors_available"
                        },
                        "action": "input_boolean.turn_on"
                      },
                      {
                        "alias": "Update Sensor Status",
                        "target": {
                          "entity_id": "input_text.climate_sensor_status"
                        },
                        "data": {
                          "value": "Primary sensor: {{ primary_temp }}\u00b0F - OK"
                        },
                        "action": "input_text.set_value"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ weather_available and weather_valid_range }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Use KAKR Weather Service",
                        "target": {
                          "entity_id": "input_number.climate_outdoor_temperature_best"
                        },
                        "data": {
                          "value": "{{ weather_temp }}"
                        },
                        "action": "input_number.set_value"
                      },
                      {
                        "alias": "Set Weather Source",
                        "target": {
                          "entity_id": "input_select.climate_outdoor_data_source"
                        },
                        "data": {
                          "option": "weather_service"
                        },
                        "action": "input_select.select_option"
                      },
                      {
                        "alias": "Set Sensors Available",
                        "target": {
                          "entity_id": "input_boolean.climate_outdoor_sensors_available"
                        },
                        "action": "input_boolean.turn_on"
                      },
                      {
                        "alias": "Update Sensor Status",
                        "target": {
                          "entity_id": "input_text.climate_sensor_status"
                        },
                        "data": {
                          "value": "KAKR weather: {{ weather_temp }}\u00b0F - Primary sensor issue"
                        },
                        "action": "input_text.set_value"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "alias": "Use Indoor-Only Mode",
                    "target": {
                      "entity_id": "input_number.climate_outdoor_temperature_best"
                    },
                    "data": {
                      "value": "{{ indoor_temp }}"
                    },
                    "action": "input_number.set_value"
                  },
                  {
                    "alias": "Set Indoor Only Source",
                    "target": {
                      "entity_id": "input_select.climate_outdoor_data_source"
                    },
                    "data": {
                      "option": "indoor_only"
                    },
                    "action": "input_select.select_option"
                  },
                  {
                    "alias": "Set Sensors Unavailable",
                    "target": {
                      "entity_id": "input_boolean.climate_outdoor_sensors_available"
                    },
                    "action": "input_boolean.turn_off"
                  },
                  {
                    "alias": "Update Sensor Status",
                    "target": {
                      "entity_id": "input_text.climate_sensor_status"
                    },
                    "data": {
                      "value": "Indoor-only mode: {{ indoor_temp }}\u00b0F - All outdoor sources failed"
                    },
                    "action": "input_text.set_value"
                  }
                ]
              },
              {
                "alias": "Update Last Reading Time",
                "target": {
                  "entity_id": "input_datetime.climate_last_outdoor_reading"
                },
                "data": {
                  "datetime": "{{ now() }}"
                },
                "action": "input_datetime.set_datetime"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
            "parent_id": null,
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "action/2",
          "run_id": "34bbf53f22b01713a9d3d59e0bec5d10",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:05:06.553613+00:00",
            "finish": "2025-07-04T18:05:06.557670+00:00"
          },
          "domain": "automation",
          "item_id": "climate_sensor_manager",
          "trigger": "Home Assistant starting"
        }
      },
      {
        "extended_dict": {
          "last_step": "action/2",
          "run_id": "e87b186eb7550f1b9ce56cda35d97c4c",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:14:56.117829+00:00",
            "finish": "2025-07-04T18:14:56.136300+00:00"
          },
          "domain": "automation",
          "item_id": "climate_sensor_manager",
          "trigger": "state of sensor.outdoor_sensor_temperature",
          "trace": {
            "trigger/0": [
              {
                "path": "trigger/0",
                "timestamp": "2025-07-04T18:14:56.117873+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_sensor_manager",
                    "state": "on",
                    "attributes": {
                      "id": "climate_sensor_manager",
                      "last_triggered": "2025-07-04T18:05:06.553658+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Sensor Manager"
                    },
                    "last_changed": "2025-07-04T18:04:56.733517+00:00",
                    "last_reported": "2025-07-04T18:05:06.557695+00:00",
                    "last_updated": "2025-07-04T18:05:06.557621+00:00",
                    "context": {
                      "id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "0",
                    "idx": "0",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "sensor.outdoor_sensor_temperature",
                    "from_state": {
                      "entity_id": "sensor.outdoor_sensor_temperature",
                      "state": "89.42",
                      "attributes": {
                        "state_class": "measurement",
                        "unit_of_measurement": "\u00b0F",
                        "device_class": "temperature",
                        "friendly_name": "Outdoor Sensor Temperature"
                      },
                      "last_changed": "2025-07-04T18:04:56.289626+00:00",
                      "last_reported": "2025-07-04T18:04:56.289626+00:00",
                      "last_updated": "2025-07-04T18:04:56.289626+00:00",
                      "context": {
                        "id": "01JZB9SSK1AA661ER29V132RCE",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "sensor.outdoor_sensor_temperature",
                      "state": "90.32",
                      "attributes": {
                        "state_class": "measurement",
                        "unit_of_measurement": "\u00b0F",
                        "device_class": "temperature",
                        "friendly_name": "Outdoor Sensor Temperature"
                      },
                      "last_changed": "2025-07-04T18:14:56.117440+00:00",
                      "last_reported": "2025-07-04T18:14:56.117440+00:00",
                      "last_updated": "2025-07-04T18:14:56.117440+00:00",
                      "context": {
                        "id": "01JZBAC3BNCRHX23SXNW3JJF5X",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of sensor.outdoor_sensor_temperature"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:14:56.117942+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:14:56.117961+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "action/0": [
              {
                "path": "action/0",
                "timestamp": "2025-07-04T18:14:56.120439+00:00",
                "changed_variables": {
                  "context": {
                    "id": "01JZBAC3BNB7GXKFRHXFWSEWPV",
                    "parent_id": "01JZBAC3BNCRHX23SXNW3JJF5X",
                    "user_id": null
                  },
                  "primary_temp_raw": 90.32,
                  "primary_available": true,
                  "primary_temp": 90.32,
                  "primary_valid_range": true,
                  "weather_temp_raw": 83,
                  "weather_available": true,
                  "weather_temp": 83.0,
                  "weather_valid_range": true,
                  "indoor_temp": 69.98,
                  "primary_usable": true
                }
              }
            ],
            "action/1": [
              {
                "path": "action/1",
                "timestamp": "2025-07-04T18:14:56.121147+00:00",
                "result": {
                  "choice": 0
                }
              }
            ],
            "action/1/choose/0": [
              {
                "path": "action/1/choose/0",
                "timestamp": "2025-07-04T18:14:56.121213+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/1/choose/0/conditions/0": [
              {
                "path": "action/1/choose/0/conditions/0",
                "timestamp": "2025-07-04T18:14:56.121275+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/1/choose/0/sequence/0": [
              {
                "path": "action/1/choose/0/sequence/0",
                "timestamp": "2025-07-04T18:14:56.121487+00:00",
                "result": {
                  "params": {
                    "domain": "input_number",
                    "service": "set_value",
                    "service_data": {
                      "value": 90.32,
                      "entity_id": [
                        "input_number.climate_outdoor_temperature_best"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_number.climate_outdoor_temperature_best"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/choose/0/sequence/1": [
              {
                "path": "action/1/choose/0/sequence/1",
                "timestamp": "2025-07-04T18:14:56.122095+00:00",
                "result": {
                  "params": {
                    "domain": "input_select",
                    "service": "select_option",
                    "service_data": {
                      "option": "primary_sensor",
                      "entity_id": [
                        "input_select.climate_outdoor_data_source"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_select.climate_outdoor_data_source"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/choose/0/sequence/2": [
              {
                "path": "action/1/choose/0/sequence/2",
                "timestamp": "2025-07-04T18:14:56.122483+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "input_boolean.climate_outdoor_sensors_available"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1/choose/0/sequence/3": [
              {
                "path": "action/1/choose/0/sequence/3",
                "timestamp": "2025-07-04T18:14:56.135729+00:00",
                "result": {
                  "params": {
                    "domain": "input_text",
                    "service": "set_value",
                    "service_data": {
                      "value": "Primary sensor: 90.32\u00b0F - OK",
                      "entity_id": [
                        "input_text.climate_sensor_status"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_text.climate_sensor_status"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/2": [
              {
                "path": "action/2",
                "timestamp": "2025-07-04T18:14:56.136024+00:00",
                "result": {
                  "params": {
                    "domain": "input_datetime",
                    "service": "set_datetime",
                    "service_data": {
                      "datetime": "2025-07-04 14:14:56.136091-04:00",
                      "entity_id": [
                        "input_datetime.climate_last_outdoor_reading"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_datetime.climate_last_outdoor_reading"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Sensor Manager",
            "description": "Manages outdoor temperature source priority",
            "id": "climate_sensor_manager",
            "triggers": [
              {
                "platform": "state",
                "entity_id": "sensor.outdoor_sensor_temperature"
              },
              {
                "platform": "state",
                "entity_id": "weather.kakr",
                "attribute": "temperature"
              },
              {
                "platform": "time_pattern",
                "minutes": 2
              },
              {
                "platform": "homeassistant",
                "event": "start"
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              }
            ],
            "actions": [
              {
                "alias": "Evaluate Sensor Hierarchy",
                "variables": {
                  "primary_temp_raw": "{{ states('sensor.outdoor_sensor_temperature') }}",
                  "primary_available": "{{ primary_temp_raw not in ['unknown', 'unavailable', 'none'] and \n   primary_temp_raw | float(0) != 0 }}\n",
                  "primary_temp": "{{ primary_temp_raw | float(0) if primary_available else 0 }}",
                  "primary_valid_range": "{{ primary_temp > 0 and primary_temp < 120 }}",
                  "weather_temp_raw": "{{ state_attr('weather.kakr', 'temperature') }}",
                  "weather_available": "{{ weather_temp_raw is not none and weather_temp_raw not in ['unknown', 'unavailable'] }}",
                  "weather_temp": "{{ weather_temp_raw | float(0) if weather_available else 0 }}",
                  "weather_valid_range": "{{ weather_temp > 0 and weather_temp < 120 }}",
                  "indoor_temp": "{{ states('sensor.my_ecobee_current_temperature') | float(70) }}",
                  "primary_usable": "{{ primary_available and primary_valid_range }}"
                }
              },
              {
                "alias": "Determine Best Data Source",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ primary_usable }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Use Primary Sensor",
                        "target": {
                          "entity_id": "input_number.climate_outdoor_temperature_best"
                        },
                        "data": {
                          "value": "{{ primary_temp }}"
                        },
                        "action": "input_number.set_value"
                      },
                      {
                        "alias": "Set Primary Source",
                        "target": {
                          "entity_id": "input_select.climate_outdoor_data_source"
                        },
                        "data": {
                          "option": "primary_sensor"
                        },
                        "action": "input_select.select_option"
                      },
                      {
                        "alias": "Set Sensors Available",
                        "target": {
                          "entity_id": "input_boolean.climate_outdoor_sensors_available"
                        },
                        "action": "input_boolean.turn_on"
                      },
                      {
                        "alias": "Update Sensor Status",
                        "target": {
                          "entity_id": "input_text.climate_sensor_status"
                        },
                        "data": {
                          "value": "Primary sensor: {{ primary_temp }}\u00b0F - OK"
                        },
                        "action": "input_text.set_value"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ weather_available and weather_valid_range }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Use KAKR Weather Service",
                        "target": {
                          "entity_id": "input_number.climate_outdoor_temperature_best"
                        },
                        "data": {
                          "value": "{{ weather_temp }}"
                        },
                        "action": "input_number.set_value"
                      },
                      {
                        "alias": "Set Weather Source",
                        "target": {
                          "entity_id": "input_select.climate_outdoor_data_source"
                        },
                        "data": {
                          "option": "weather_service"
                        },
                        "action": "input_select.select_option"
                      },
                      {
                        "alias": "Set Sensors Available",
                        "target": {
                          "entity_id": "input_boolean.climate_outdoor_sensors_available"
                        },
                        "action": "input_boolean.turn_on"
                      },
                      {
                        "alias": "Update Sensor Status",
                        "target": {
                          "entity_id": "input_text.climate_sensor_status"
                        },
                        "data": {
                          "value": "KAKR weather: {{ weather_temp }}\u00b0F - Primary sensor issue"
                        },
                        "action": "input_text.set_value"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "alias": "Use Indoor-Only Mode",
                    "target": {
                      "entity_id": "input_number.climate_outdoor_temperature_best"
                    },
                    "data": {
                      "value": "{{ indoor_temp }}"
                    },
                    "action": "input_number.set_value"
                  },
                  {
                    "alias": "Set Indoor Only Source",
                    "target": {
                      "entity_id": "input_select.climate_outdoor_data_source"
                    },
                    "data": {
                      "option": "indoor_only"
                    },
                    "action": "input_select.select_option"
                  },
                  {
                    "alias": "Set Sensors Unavailable",
                    "target": {
                      "entity_id": "input_boolean.climate_outdoor_sensors_available"
                    },
                    "action": "input_boolean.turn_off"
                  },
                  {
                    "alias": "Update Sensor Status",
                    "target": {
                      "entity_id": "input_text.climate_sensor_status"
                    },
                    "data": {
                      "value": "Indoor-only mode: {{ indoor_temp }}\u00b0F - All outdoor sources failed"
                    },
                    "action": "input_text.set_value"
                  }
                ]
              },
              {
                "alias": "Update Last Reading Time",
                "target": {
                  "entity_id": "input_datetime.climate_last_outdoor_reading"
                },
                "data": {
                  "datetime": "{{ now() }}"
                },
                "action": "input_datetime.set_datetime"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZBAC3BNB7GXKFRHXFWSEWPV",
            "parent_id": "01JZBAC3BNCRHX23SXNW3JJF5X",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "action/2",
          "run_id": "e87b186eb7550f1b9ce56cda35d97c4c",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:14:56.117829+00:00",
            "finish": "2025-07-04T18:14:56.136300+00:00"
          },
          "domain": "automation",
          "item_id": "climate_sensor_manager",
          "trigger": "state of sensor.outdoor_sensor_temperature"
        }
      }
    ],
    "automation.climate_day_schedule": [
      {
        "extended_dict": {
          "last_step": "action/4",
          "run_id": "ab4fd26ce02681f7bf6a967166ba7650",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:05:06.562057+00:00",
            "finish": "2025-07-04T18:05:06.795754+00:00"
          },
          "domain": "automation",
          "item_id": "climate_day_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best",
          "trace": {
            "trigger/0": [
              {
                "path": "trigger/0",
                "timestamp": "2025-07-04T18:05:06.562071+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_day_schedule",
                    "state": "on",
                    "attributes": {
                      "id": "climate_day_schedule",
                      "last_triggered": "2025-07-02T23:58:46.949699+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Day Schedule"
                    },
                    "last_changed": "2025-07-04T18:04:56.733545+00:00",
                    "last_reported": "2025-07-04T18:04:56.733545+00:00",
                    "last_updated": "2025-07-04T18:04:56.733545+00:00",
                    "context": {
                      "id": "01JZB9ST0XS40RN0BV1PSJ5KWM",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "0",
                    "idx": "0",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "input_number.climate_outdoor_temperature_best",
                    "from_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "70.0",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:04:49.997288+00:00",
                      "last_reported": "2025-07-04T18:04:49.997288+00:00",
                      "last_updated": "2025-07-04T18:04:49.997288+00:00",
                      "context": {
                        "id": "01JZB9SKEDCP00V85CM8MJ8MCK",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "89.42",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:05:06.554346+00:00",
                      "last_reported": "2025-07-04T18:05:06.554346+00:00",
                      "last_updated": "2025-07-04T18:05:06.554346+00:00",
                      "context": {
                        "id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of input_number.climate_outdoor_temperature_best"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:05:06.562080+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.562088+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2025-07-04T18:05:06.562109+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/entity_id/0": [
              {
                "path": "condition/1/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.562115+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2025-07-04T18:05:06.562124+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/2/entity_id/0": [
              {
                "path": "condition/2/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.562128+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/3": [
              {
                "path": "condition/3",
                "timestamp": "2025-07-04T18:05:06.562135+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0": [
              {
                "path": "action/0",
                "timestamp": "2025-07-04T18:05:06.562248+00:00",
                "changed_variables": {
                  "context": {
                    "id": "01JZB9T3M24QMTFRHNNXHCBGYW",
                    "parent_id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                    "user_id": null
                  }
                },
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "input_boolean.climate_automation_coordination_lock"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1": [
              {
                "path": "action/1",
                "timestamp": "2025-07-04T18:05:06.562440+00:00",
                "result": {
                  "params": {
                    "domain": "input_text",
                    "service": "set_value",
                    "service_data": {
                      "value": "day_schedule",
                      "entity_id": [
                        "input_text.climate_priority_automation"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_text.climate_priority_automation"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/2": [
              {
                "path": "action/2",
                "timestamp": "2025-07-04T18:05:06.562565+00:00",
                "changed_variables": {
                  "outdoor_temp": 89.42,
                  "data_source": "primary_sensor",
                  "indoor_temp": 70.16,
                  "outdoor_available": true,
                  "last_action": "none",
                  "cool_trigger": 69,
                  "heat_trigger": 60
                }
              }
            ],
            "action/3": [
              {
                "path": "action/3",
                "timestamp": "2025-07-04T18:05:06.562789+00:00",
                "result": {
                  "choice": 2
                }
              }
            ],
            "action/3/choose/0": [
              {
                "path": "action/3/choose/0",
                "timestamp": "2025-07-04T18:05:06.562856+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/3/choose/0/conditions/0": [
              {
                "path": "action/3/choose/0/conditions/0",
                "timestamp": "2025-07-04T18:05:06.562877+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/3/choose/1": [
              {
                "path": "action/3/choose/1",
                "timestamp": "2025-07-04T18:05:06.562924+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/3/choose/1/conditions/0": [
              {
                "path": "action/3/choose/1/conditions/0",
                "timestamp": "2025-07-04T18:05:06.562943+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/3/choose/2": [
              {
                "path": "action/3/choose/2",
                "timestamp": "2025-07-04T18:05:06.562988+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "action/3/choose/2/conditions/0": [
              {
                "path": "action/3/choose/2/conditions/0",
                "timestamp": "2025-07-04T18:05:06.563004+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/3/choose/2/sequence/0": [
              {
                "path": "action/3/choose/2/sequence/0",
                "timestamp": "2025-07-04T18:05:06.563068+00:00",
                "result": {
                  "params": {
                    "domain": "climate",
                    "service": "set_temperature",
                    "service_data": {
                      "temperature": 70,
                      "hvac_mode": "cool",
                      "entity_id": [
                        "climate.my_ecobee"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "climate.my_ecobee"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/3/choose/2/sequence/1": [
              {
                "path": "action/3/choose/2/sequence/1",
                "timestamp": "2025-07-04T18:05:06.794868+00:00",
                "result": {
                  "params": {
                    "domain": "input_text",
                    "service": "set_value",
                    "service_data": {
                      "value": "day_cooled_to_70",
                      "entity_id": [
                        "input_text.last_climate_action"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_text.last_climate_action"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/3/choose/2/sequence/2": [
              {
                "path": "action/3/choose/2/sequence/2",
                "timestamp": "2025-07-04T18:05:06.795088+00:00",
                "result": {
                  "params": {
                    "domain": "input_text",
                    "service": "set_value",
                    "service_data": {
                      "value": "Day Schedule: 89.42\u00b0F > 69\u00b0F \u2192 Cool to 70\u00b0F (primary_sensor)",
                      "entity_id": [
                        "input_text.climate_logic_reason"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_text.climate_logic_reason"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/3/choose/2/sequence/3": [
              {
                "path": "action/3/choose/2/sequence/3",
                "timestamp": "2025-07-04T18:05:06.795286+00:00",
                "result": {
                  "params": {
                    "domain": "logbook",
                    "service": "log",
                    "service_data": {
                      "name": "Climate Day Schedule",
                      "message": "COOL: Set to 70\u00b0F - Outdoor 89.42\u00b0F via primary_sensor"
                    },
                    "target": {}
                  },
                  "running_script": false
                }
              }
            ],
            "action/4": [
              {
                "path": "action/4",
                "timestamp": "2025-07-04T18:05:06.795594+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_off",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "input_boolean.climate_automation_coordination_lock"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Day Schedule",
            "description": "Manages daytime temperature with coordination",
            "id": "climate_day_schedule",
            "triggers": [
              {
                "platform": "state",
                "entity_id": "input_number.climate_outdoor_temperature_best"
              },
              {
                "platform": "time_pattern",
                "minutes": 0
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_manual_override_active",
                "state": "off"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_coordination_lock",
                "state": "off"
              },
              {
                "condition": "template",
                "value_template": "{{ now().hour >= 6 and now().hour < 20 }}\n"
              }
            ],
            "actions": [
              {
                "alias": "Set Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_on"
              },
              {
                "alias": "Update Priority Automation",
                "target": {
                  "entity_id": "input_text.climate_priority_automation"
                },
                "data": {
                  "value": "day_schedule"
                },
                "action": "input_text.set_value"
              },
              {
                "alias": "Calculate Variables",
                "variables": {
                  "outdoor_temp": "{{ states('input_number.climate_outdoor_temperature_best') | float(70) }}",
                  "data_source": "{{ states('input_select.climate_outdoor_data_source') }}",
                  "indoor_temp": "{{ states('sensor.my_ecobee_current_temperature') | float(70) }}",
                  "outdoor_available": "{{ states('input_boolean.climate_outdoor_sensors_available') == 'on' }}",
                  "last_action": "{{ states('input_text.last_climate_action') }}",
                  "cool_trigger": "{{ 72 if data_source == 'indoor_only' else 69 }}",
                  "heat_trigger": "{{ 65 if data_source == 'indoor_only' else 60 }}"
                }
              },
              {
                "alias": "Execute Day Schedule Logic",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp < heat_trigger and last_action != 'day_heated_to_68' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Heat Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 68,
                          "hvac_mode": "heat"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "day_heated_to_68"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Day Schedule: {{ outdoor_temp }}\u00b0F < {{ heat_trigger }}\u00b0F \u2192 Heat to 68\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Day Heat Action",
                        "data": {
                          "name": "Climate Day Schedule",
                          "message": "HEAT: Set to 68\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{% if outdoor_available %}\n  {{ outdoor_temp >= 60 and outdoor_temp <= 69 }}\n{% else %}\n  {{ indoor_temp >= 68 and indoor_temp <= 71 }}\n{% endif %}\n"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set HVAC Off",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "hvac_mode": "off"
                        },
                        "action": "climate.set_hvac_mode"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "day_nice_weather"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Day Schedule: Comfortable {{ outdoor_temp }}\u00b0F \u2192 Climate off ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Day Off Action",
                        "data": {
                          "name": "Climate Day Schedule",
                          "message": "OFF: Comfortable weather - {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp > cool_trigger and last_action != 'day_cooled_to_70' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Cool Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 70,
                          "hvac_mode": "cool"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "day_cooled_to_70"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Day Schedule: {{ outdoor_temp }}\u00b0F > {{ cool_trigger }}\u00b0F \u2192 Cool to 70\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Day Cool Action",
                        "data": {
                          "name": "Climate Day Schedule",
                          "message": "COOL: Set to 70\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  }
                ]
              },
              {
                "alias": "Release Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_off"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZB9T3M24QMTFRHNNXHCBGYW",
            "parent_id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "action/4",
          "run_id": "ab4fd26ce02681f7bf6a967166ba7650",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:05:06.562057+00:00",
            "finish": "2025-07-04T18:05:06.795754+00:00"
          },
          "domain": "automation",
          "item_id": "climate_day_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best"
        }
      },
      {
        "extended_dict": {
          "last_step": "action/4",
          "run_id": "7bc9c0a10be02a37c37e9b4feabf5fc0",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:14:56.136477+00:00",
            "finish": "2025-07-04T18:14:56.137417+00:00"
          },
          "domain": "automation",
          "item_id": "climate_day_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best",
          "trace": {
            "trigger/0": [
              {
                "path": "trigger/0",
                "timestamp": "2025-07-04T18:14:56.136490+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_day_schedule",
                    "state": "on",
                    "attributes": {
                      "id": "climate_day_schedule",
                      "last_triggered": "2025-07-04T18:05:06.562207+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Day Schedule"
                    },
                    "last_changed": "2025-07-04T18:04:56.733545+00:00",
                    "last_reported": "2025-07-04T18:05:06.795718+00:00",
                    "last_updated": "2025-07-04T18:05:06.795718+00:00",
                    "context": {
                      "id": "01JZB9T3M24QMTFRHNNXHCBGYW",
                      "parent_id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "0",
                    "idx": "0",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "input_number.climate_outdoor_temperature_best",
                    "from_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "89.42",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:05:06.554346+00:00",
                      "last_reported": "2025-07-04T18:05:06.554346+00:00",
                      "last_updated": "2025-07-04T18:05:06.554346+00:00",
                      "context": {
                        "id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "90.32",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:14:56.121895+00:00",
                      "last_reported": "2025-07-04T18:14:56.121895+00:00",
                      "last_updated": "2025-07-04T18:14:56.121895+00:00",
                      "context": {
                        "id": "01JZBAC3BNB7GXKFRHXFWSEWPV",
                        "parent_id": "01JZBAC3BNCRHX23SXNW3JJF5X",
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of input_number.climate_outdoor_temperature_best"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:14:56.136499+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:14:56.136505+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2025-07-04T18:14:56.136519+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/entity_id/0": [
              {
                "path": "condition/1/entity_id/0",
                "timestamp": "2025-07-04T18:14:56.136524+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2025-07-04T18:14:56.136532+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/2/entity_id/0": [
              {
                "path": "condition/2/entity_id/0",
                "timestamp": "2025-07-04T18:14:56.136536+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/3": [
              {
                "path": "condition/3",
                "timestamp": "2025-07-04T18:14:56.136542+00:00",
                "result": {
                  "result": true,
                  "entities": []
                }
              }
            ],
            "action/0": [
              {
                "path": "action/0",
                "timestamp": "2025-07-04T18:14:56.136647+00:00",
                "changed_variables": {
                  "context": {
                    "id": "01JZBAC3C8E1XESP75BWREKGRG",
                    "parent_id": "01JZBAC3BNB7GXKFRHXFWSEWPV",
                    "user_id": null
                  }
                },
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_on",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "input_boolean.climate_automation_coordination_lock"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/1": [
              {
                "path": "action/1",
                "timestamp": "2025-07-04T18:14:56.136786+00:00",
                "result": {
                  "params": {
                    "domain": "input_text",
                    "service": "set_value",
                    "service_data": {
                      "value": "day_schedule",
                      "entity_id": [
                        "input_text.climate_priority_automation"
                      ]
                    },
                    "target": {
                      "entity_id": [
                        "input_text.climate_priority_automation"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ],
            "action/2": [
              {
                "path": "action/2",
                "timestamp": "2025-07-04T18:14:56.136891+00:00",
                "changed_variables": {
                  "outdoor_temp": 90.32,
                  "data_source": "primary_sensor",
                  "indoor_temp": 69.98,
                  "outdoor_available": true,
                  "last_action": "day_cooled_to_70",
                  "cool_trigger": 69,
                  "heat_trigger": 60
                }
              }
            ],
            "action/3": [
              {
                "path": "action/3",
                "timestamp": "2025-07-04T18:14:56.137062+00:00"
              }
            ],
            "action/3/choose/0": [
              {
                "path": "action/3/choose/0",
                "timestamp": "2025-07-04T18:14:56.137084+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/3/choose/0/conditions/0": [
              {
                "path": "action/3/choose/0/conditions/0",
                "timestamp": "2025-07-04T18:14:56.137106+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/3/choose/1": [
              {
                "path": "action/3/choose/1",
                "timestamp": "2025-07-04T18:14:56.137151+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/3/choose/1/conditions/0": [
              {
                "path": "action/3/choose/1/conditions/0",
                "timestamp": "2025-07-04T18:14:56.137169+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/3/choose/2": [
              {
                "path": "action/3/choose/2",
                "timestamp": "2025-07-04T18:14:56.137211+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "action/3/choose/2/conditions/0": [
              {
                "path": "action/3/choose/2/conditions/0",
                "timestamp": "2025-07-04T18:14:56.137228+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ],
            "action/4": [
              {
                "path": "action/4",
                "timestamp": "2025-07-04T18:14:56.137275+00:00",
                "result": {
                  "params": {
                    "domain": "input_boolean",
                    "service": "turn_off",
                    "service_data": {},
                    "target": {
                      "entity_id": [
                        "input_boolean.climate_automation_coordination_lock"
                      ]
                    }
                  },
                  "running_script": false
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Day Schedule",
            "description": "Manages daytime temperature with coordination",
            "id": "climate_day_schedule",
            "triggers": [
              {
                "platform": "state",
                "entity_id": "input_number.climate_outdoor_temperature_best"
              },
              {
                "platform": "time_pattern",
                "minutes": 0
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_manual_override_active",
                "state": "off"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_coordination_lock",
                "state": "off"
              },
              {
                "condition": "template",
                "value_template": "{{ now().hour >= 6 and now().hour < 20 }}\n"
              }
            ],
            "actions": [
              {
                "alias": "Set Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_on"
              },
              {
                "alias": "Update Priority Automation",
                "target": {
                  "entity_id": "input_text.climate_priority_automation"
                },
                "data": {
                  "value": "day_schedule"
                },
                "action": "input_text.set_value"
              },
              {
                "alias": "Calculate Variables",
                "variables": {
                  "outdoor_temp": "{{ states('input_number.climate_outdoor_temperature_best') | float(70) }}",
                  "data_source": "{{ states('input_select.climate_outdoor_data_source') }}",
                  "indoor_temp": "{{ states('sensor.my_ecobee_current_temperature') | float(70) }}",
                  "outdoor_available": "{{ states('input_boolean.climate_outdoor_sensors_available') == 'on' }}",
                  "last_action": "{{ states('input_text.last_climate_action') }}",
                  "cool_trigger": "{{ 72 if data_source == 'indoor_only' else 69 }}",
                  "heat_trigger": "{{ 65 if data_source == 'indoor_only' else 60 }}"
                }
              },
              {
                "alias": "Execute Day Schedule Logic",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp < heat_trigger and last_action != 'day_heated_to_68' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Heat Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 68,
                          "hvac_mode": "heat"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "day_heated_to_68"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Day Schedule: {{ outdoor_temp }}\u00b0F < {{ heat_trigger }}\u00b0F \u2192 Heat to 68\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Day Heat Action",
                        "data": {
                          "name": "Climate Day Schedule",
                          "message": "HEAT: Set to 68\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{% if outdoor_available %}\n  {{ outdoor_temp >= 60 and outdoor_temp <= 69 }}\n{% else %}\n  {{ indoor_temp >= 68 and indoor_temp <= 71 }}\n{% endif %}\n"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set HVAC Off",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "hvac_mode": "off"
                        },
                        "action": "climate.set_hvac_mode"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "day_nice_weather"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Day Schedule: Comfortable {{ outdoor_temp }}\u00b0F \u2192 Climate off ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Day Off Action",
                        "data": {
                          "name": "Climate Day Schedule",
                          "message": "OFF: Comfortable weather - {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp > cool_trigger and last_action != 'day_cooled_to_70' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Cool Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 70,
                          "hvac_mode": "cool"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "day_cooled_to_70"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Day Schedule: {{ outdoor_temp }}\u00b0F > {{ cool_trigger }}\u00b0F \u2192 Cool to 70\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Day Cool Action",
                        "data": {
                          "name": "Climate Day Schedule",
                          "message": "COOL: Set to 70\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  }
                ]
              },
              {
                "alias": "Release Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_off"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZBAC3C8E1XESP75BWREKGRG",
            "parent_id": "01JZBAC3BNB7GXKFRHXFWSEWPV",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "action/4",
          "run_id": "7bc9c0a10be02a37c37e9b4feabf5fc0",
          "state": "stopped",
          "script_execution": "finished",
          "timestamp": {
            "start": "2025-07-04T18:14:56.136477+00:00",
            "finish": "2025-07-04T18:14:56.137417+00:00"
          },
          "domain": "automation",
          "item_id": "climate_day_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best"
        }
      }
    ],
    "automation.climate_night_schedule": [
      {
        "extended_dict": {
          "last_step": "condition/2/entity_id/0",
          "run_id": "810e4e27e67a3bf34817a3d0a156109a",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:05:06.563771+00:00",
            "finish": "2025-07-04T18:05:06.563840+00:00"
          },
          "domain": "automation",
          "item_id": "climate_night_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best",
          "trace": {
            "trigger/1": [
              {
                "path": "trigger/1",
                "timestamp": "2025-07-04T18:05:06.563787+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_night_schedule",
                    "state": "on",
                    "attributes": {
                      "id": "climate_night_schedule",
                      "last_triggered": "2025-07-03T00:28:46.830641+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Night Schedule"
                    },
                    "last_changed": "2025-07-04T18:04:56.733588+00:00",
                    "last_reported": "2025-07-04T18:04:56.733588+00:00",
                    "last_updated": "2025-07-04T18:04:56.733588+00:00",
                    "context": {
                      "id": "01JZB9ST0XWJKF549YSSWHZQ8Y",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "1",
                    "idx": "1",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "input_number.climate_outdoor_temperature_best",
                    "from_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "70.0",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:04:49.997288+00:00",
                      "last_reported": "2025-07-04T18:04:49.997288+00:00",
                      "last_updated": "2025-07-04T18:04:49.997288+00:00",
                      "context": {
                        "id": "01JZB9SKEDCP00V85CM8MJ8MCK",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "89.42",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:05:06.554346+00:00",
                      "last_reported": "2025-07-04T18:05:06.554346+00:00",
                      "last_updated": "2025-07-04T18:05:06.554346+00:00",
                      "context": {
                        "id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of input_number.climate_outdoor_temperature_best"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:05:06.563796+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.563802+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2025-07-04T18:05:06.563815+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/entity_id/0": [
              {
                "path": "condition/1/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.563820+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2025-07-04T18:05:06.563828+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/2/entity_id/0": [
              {
                "path": "condition/2/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.563831+00:00",
                "result": {
                  "result": false,
                  "state": "on",
                  "wanted_state": "off"
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Night Schedule",
            "description": "Manages nighttime temperature with coordination",
            "id": "climate_night_schedule",
            "triggers": [
              {
                "platform": "time",
                "at": [
                  "20:30:00",
                  "21:30:00",
                  "05:00:00",
                  "06:00:00"
                ]
              },
              {
                "platform": "state",
                "entity_id": "input_number.climate_outdoor_temperature_best"
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_manual_override_active",
                "state": "off"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_coordination_lock",
                "state": "off"
              },
              {
                "condition": "template",
                "value_template": "{{ now().hour >= 20 or now().hour < 6 }}\n"
              }
            ],
            "actions": [
              {
                "alias": "Set Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_on"
              },
              {
                "alias": "Update Priority Automation",
                "target": {
                  "entity_id": "input_text.climate_priority_automation"
                },
                "data": {
                  "value": "night_schedule"
                },
                "action": "input_text.set_value"
              },
              {
                "alias": "Calculate Variables",
                "variables": {
                  "outdoor_temp": "{{ states('input_number.climate_outdoor_temperature_best') | float(70) }}",
                  "indoor_temp": "{{ states('sensor.my_ecobee_current_temperature') | float(70) }}",
                  "data_source": "{{ states('input_select.climate_outdoor_data_source') }}",
                  "outdoor_available": "{{ states('input_boolean.climate_outdoor_sensors_available') == 'on' }}",
                  "last_action": "{{ states('input_text.last_climate_action') }}",
                  "cool_trigger": "{{ 71 if data_source == 'indoor_only' else 69 }}",
                  "heat_trigger": "{{ 64 if data_source == 'indoor_only' else 59 }}"
                }
              },
              {
                "alias": "Execute Night Schedule Logic",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp < heat_trigger and last_action != 'night_heated_to_67' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Heat Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 67,
                          "hvac_mode": "heat"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "night_heated_to_67"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Night Schedule: {{ outdoor_temp }}\u00b0F < {{ heat_trigger }}\u00b0F \u2192 Heat to 67\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Night Heat Action",
                        "data": {
                          "name": "Climate Night Schedule",
                          "message": "HEAT: Set to 67\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp > cool_trigger and last_action != 'night_cooled_to_67' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Cool Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 67,
                          "hvac_mode": "cool"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "night_cooled_to_67"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Night Schedule: {{ outdoor_temp }}\u00b0F > {{ cool_trigger }}\u00b0F \u2192 Cool to 67\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Night Cool Action",
                        "data": {
                          "name": "Climate Night Schedule",
                          "message": "COOL: Set to 67\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{% if outdoor_available %}\n  {{ outdoor_temp >= heat_trigger and outdoor_temp <= cool_trigger }}\n{% else %}\n  {{ indoor_temp >= 66 and indoor_temp <= 70 }}\n{% endif %}\n"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set HVAC Off",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "hvac_mode": "off"
                        },
                        "action": "climate.set_hvac_mode"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "night_off"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Night Schedule: Comfortable {{ outdoor_temp }}\u00b0F \u2192 Climate off ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Night Off Action",
                        "data": {
                          "name": "Climate Night Schedule",
                          "message": "OFF: Comfortable weather - {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  }
                ]
              },
              {
                "alias": "Release Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_off"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZB9T3M3XBYQAWC968XAYC2X",
            "parent_id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/2/entity_id/0",
          "run_id": "810e4e27e67a3bf34817a3d0a156109a",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:05:06.563771+00:00",
            "finish": "2025-07-04T18:05:06.563840+00:00"
          },
          "domain": "automation",
          "item_id": "climate_night_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best"
        }
      },
      {
        "extended_dict": {
          "last_step": "condition/3",
          "run_id": "6070177f47ef1f8e9d2ec1682e5a0929",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:14:56.137437+00:00",
            "finish": "2025-07-04T18:14:56.137535+00:00"
          },
          "domain": "automation",
          "item_id": "climate_night_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best",
          "trace": {
            "trigger/1": [
              {
                "path": "trigger/1",
                "timestamp": "2025-07-04T18:14:56.137446+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_night_schedule",
                    "state": "on",
                    "attributes": {
                      "id": "climate_night_schedule",
                      "last_triggered": "2025-07-03T00:28:46.830641+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Night Schedule"
                    },
                    "last_changed": "2025-07-04T18:04:56.733588+00:00",
                    "last_reported": "2025-07-04T18:04:56.733588+00:00",
                    "last_updated": "2025-07-04T18:04:56.733588+00:00",
                    "context": {
                      "id": "01JZB9ST0XWJKF549YSSWHZQ8Y",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "1",
                    "idx": "1",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "input_number.climate_outdoor_temperature_best",
                    "from_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "89.42",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:05:06.554346+00:00",
                      "last_reported": "2025-07-04T18:05:06.554346+00:00",
                      "last_updated": "2025-07-04T18:05:06.554346+00:00",
                      "context": {
                        "id": "01JZB9T3KSBFW4D7P3XCTAD2D1",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "input_number.climate_outdoor_temperature_best",
                      "state": "90.32",
                      "attributes": {
                        "initial": 70.0,
                        "editable": false,
                        "min": -20.0,
                        "max": 130.0,
                        "step": 0.1,
                        "mode": "slider",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer",
                        "friendly_name": "Climate Best Available Outdoor Temperature"
                      },
                      "last_changed": "2025-07-04T18:14:56.121895+00:00",
                      "last_reported": "2025-07-04T18:14:56.121895+00:00",
                      "last_updated": "2025-07-04T18:14:56.121895+00:00",
                      "context": {
                        "id": "01JZBAC3BNB7GXKFRHXFWSEWPV",
                        "parent_id": "01JZBAC3BNCRHX23SXNW3JJF5X",
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of input_number.climate_outdoor_temperature_best"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:14:56.137453+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:14:56.137459+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2025-07-04T18:14:56.137469+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/entity_id/0": [
              {
                "path": "condition/1/entity_id/0",
                "timestamp": "2025-07-04T18:14:56.137473+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2025-07-04T18:14:56.137480+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/2/entity_id/0": [
              {
                "path": "condition/2/entity_id/0",
                "timestamp": "2025-07-04T18:14:56.137485+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/3": [
              {
                "path": "condition/3",
                "timestamp": "2025-07-04T18:14:56.137491+00:00",
                "result": {
                  "result": false,
                  "entities": []
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Night Schedule",
            "description": "Manages nighttime temperature with coordination",
            "id": "climate_night_schedule",
            "triggers": [
              {
                "platform": "time",
                "at": [
                  "20:30:00",
                  "21:30:00",
                  "05:00:00",
                  "06:00:00"
                ]
              },
              {
                "platform": "state",
                "entity_id": "input_number.climate_outdoor_temperature_best"
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_manual_override_active",
                "state": "off"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_coordination_lock",
                "state": "off"
              },
              {
                "condition": "template",
                "value_template": "{{ now().hour >= 20 or now().hour < 6 }}\n"
              }
            ],
            "actions": [
              {
                "alias": "Set Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_on"
              },
              {
                "alias": "Update Priority Automation",
                "target": {
                  "entity_id": "input_text.climate_priority_automation"
                },
                "data": {
                  "value": "night_schedule"
                },
                "action": "input_text.set_value"
              },
              {
                "alias": "Calculate Variables",
                "variables": {
                  "outdoor_temp": "{{ states('input_number.climate_outdoor_temperature_best') | float(70) }}",
                  "indoor_temp": "{{ states('sensor.my_ecobee_current_temperature') | float(70) }}",
                  "data_source": "{{ states('input_select.climate_outdoor_data_source') }}",
                  "outdoor_available": "{{ states('input_boolean.climate_outdoor_sensors_available') == 'on' }}",
                  "last_action": "{{ states('input_text.last_climate_action') }}",
                  "cool_trigger": "{{ 71 if data_source == 'indoor_only' else 69 }}",
                  "heat_trigger": "{{ 64 if data_source == 'indoor_only' else 59 }}"
                }
              },
              {
                "alias": "Execute Night Schedule Logic",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp < heat_trigger and last_action != 'night_heated_to_67' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Heat Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 67,
                          "hvac_mode": "heat"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "night_heated_to_67"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Night Schedule: {{ outdoor_temp }}\u00b0F < {{ heat_trigger }}\u00b0F \u2192 Heat to 67\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Night Heat Action",
                        "data": {
                          "name": "Climate Night Schedule",
                          "message": "HEAT: Set to 67\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ outdoor_temp > cool_trigger and last_action != 'night_cooled_to_67' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Cool Mode",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 67,
                          "hvac_mode": "cool"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "night_cooled_to_67"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Night Schedule: {{ outdoor_temp }}\u00b0F > {{ cool_trigger }}\u00b0F \u2192 Cool to 67\u00b0F ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Night Cool Action",
                        "data": {
                          "name": "Climate Night Schedule",
                          "message": "COOL: Set to 67\u00b0F - Outdoor {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{% if outdoor_available %}\n  {{ outdoor_temp >= heat_trigger and outdoor_temp <= cool_trigger }}\n{% else %}\n  {{ indoor_temp >= 66 and indoor_temp <= 70 }}\n{% endif %}\n"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set HVAC Off",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "hvac_mode": "off"
                        },
                        "action": "climate.set_hvac_mode"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "night_off"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Night Schedule: Comfortable {{ outdoor_temp }}\u00b0F \u2192 Climate off ({{ data_source }})"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Night Off Action",
                        "data": {
                          "name": "Climate Night Schedule",
                          "message": "OFF: Comfortable weather - {{ outdoor_temp }}\u00b0F via {{ data_source }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  }
                ]
              },
              {
                "alias": "Release Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_off"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZBAC3C9WNXFZPK016EC7781",
            "parent_id": "01JZBAC3BNB7GXKFRHXFWSEWPV",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/3",
          "run_id": "6070177f47ef1f8e9d2ec1682e5a0929",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:14:56.137437+00:00",
            "finish": "2025-07-04T18:14:56.137535+00:00"
          },
          "domain": "automation",
          "item_id": "climate_night_schedule",
          "trigger": "state of input_number.climate_outdoor_temperature_best"
        }
      }
    ],
    "automation.climate_weather_intelligence": [
      {
        "extended_dict": {
          "last_step": "condition/2/entity_id/0",
          "run_id": "50f7ab8488e8aab5216f363460d41b90",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:05:06.564238+00:00",
            "finish": "2025-07-04T18:05:06.564300+00:00"
          },
          "domain": "automation",
          "item_id": "climate_weather_intelligence",
          "trigger": "state of sensor.weather_forecast_today_high",
          "trace": {
            "trigger/1": [
              {
                "path": "trigger/1",
                "timestamp": "2025-07-04T18:05:06.564250+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_weather_intelligence",
                    "state": "on",
                    "attributes": {
                      "id": "climate_weather_intelligence",
                      "last_triggered": "2025-06-29T11:49:54.152322+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Weather Intelligence"
                    },
                    "last_changed": "2025-07-04T18:04:56.733616+00:00",
                    "last_reported": "2025-07-04T18:04:56.733616+00:00",
                    "last_updated": "2025-07-04T18:04:56.733616+00:00",
                    "context": {
                      "id": "01JZB9ST0XP5EQ38RQ9DM3B56J",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "1",
                    "idx": "1",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "sensor.weather_forecast_today_high",
                    "from_state": {
                      "entity_id": "sensor.weather_forecast_today_high",
                      "state": "80.0",
                      "attributes": {
                        "forecast_available": true,
                        "precool_needed": false,
                        "hot_days_ahead": "Checking forecast...",
                        "data_source": "KAKR Weather Service (Polled)",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer-high",
                        "friendly_name": "Weather Forecast Today High"
                      },
                      "last_changed": "2025-07-04T18:05:06.034523+00:00",
                      "last_reported": "2025-07-04T18:05:06.034523+00:00",
                      "last_updated": "2025-07-04T18:05:06.034523+00:00",
                      "context": {
                        "id": "01JZB9T33JNZ7GGV31NE6C877X",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "sensor.weather_forecast_today_high",
                      "state": "90.0",
                      "attributes": {
                        "forecast_available": true,
                        "precool_needed": true,
                        "hot_days_ahead": "Checking forecast...",
                        "data_source": "KAKR Weather Service (Polled)",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer-high",
                        "friendly_name": "Weather Forecast Today High"
                      },
                      "last_changed": "2025-07-04T18:05:06.561863+00:00",
                      "last_reported": "2025-07-04T18:05:06.561863+00:00",
                      "last_updated": "2025-07-04T18:05:06.561863+00:00",
                      "context": {
                        "id": "01JZB9T3KQ29W3NT4XKT8M2S0S",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of sensor.weather_forecast_today_high"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:05:06.564258+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.564265+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2025-07-04T18:05:06.564277+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/entity_id/0": [
              {
                "path": "condition/1/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.564282+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2025-07-04T18:05:06.564289+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/2/entity_id/0": [
              {
                "path": "condition/2/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.564293+00:00",
                "result": {
                  "result": false,
                  "state": "on",
                  "wanted_state": "off"
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Weather Intelligence",
            "description": "Pre-cooling for hot days (6AM if forecast >86\u00b0F)",
            "id": "climate_weather_intelligence",
            "triggers": [
              {
                "platform": "time",
                "at": "06:00:00"
              },
              {
                "platform": "state",
                "entity_id": "sensor.weather_forecast_today_high"
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_manual_override_active",
                "state": "off"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_coordination_lock",
                "state": "off"
              },
              {
                "condition": "time",
                "after": "06:00:00",
                "before": "08:30:00"
              }
            ],
            "actions": [
              {
                "alias": "Set Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_on"
              },
              {
                "alias": "Update Priority Automation",
                "target": {
                  "entity_id": "input_text.climate_priority_automation"
                },
                "data": {
                  "value": "weather_intelligence"
                },
                "action": "input_text.set_value"
              },
              {
                "alias": "Calculate Weather Variables",
                "variables": {
                  "outdoor_temp": "{{ states('input_number.climate_outdoor_temperature_best') | float(70) }}",
                  "current_hour": "{{ now().hour }}",
                  "today_high": "{{ states('sensor.weather_forecast_today_high') | float(80) }}",
                  "is_preconditioning_time": "{{ current_hour == 6 and today_high >= 86 and outdoor_temp < 75 }}",
                  "last_action": "{{ states('input_text.last_climate_action') }}"
                }
              },
              {
                "alias": "Execute Weather Intelligence Logic",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ is_preconditioning_time }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ last_action != 'precooled_to_65' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Preconditioning Active",
                        "target": {
                          "entity_id": "input_boolean.climate_weather_preconditioning_active"
                        },
                        "action": "input_boolean.turn_on"
                      },
                      {
                        "alias": "Pre-cool to 65F",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 65,
                          "hvac_mode": "cool"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "precooled_to_65"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Weather Intelligence: Pre-cooling for {{ today_high }}\u00b0F day \u2192 Cool to 65\u00b0F"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Weather Intelligence Action",
                        "data": {
                          "name": "Climate Weather Intelligence",
                          "message": "PRE-COOL: Set to 65\u00b0F for {{ today_high }}\u00b0F forecast - Hot days: {{ states('input_text.weather_hot_days_ahead') }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ current_hour > 8 and states('input_boolean.climate_weather_preconditioning_active') == 'on' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Turn Off Preconditioning",
                        "target": {
                          "entity_id": "input_boolean.climate_weather_preconditioning_active"
                        },
                        "action": "input_boolean.turn_off"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Weather Intelligence: Pre-cooling period ended, resuming normal schedule"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Preconditioning End",
                        "data": {
                          "name": "Climate Weather Intelligence",
                          "message": "PRE-COOL END: Returning to normal schedule after morning pre-cooling"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  }
                ]
              },
              {
                "alias": "Release Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_off"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZB9T3M4W6P974SVB7VCG002",
            "parent_id": "01JZB9T3KQ29W3NT4XKT8M2S0S",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/2/entity_id/0",
          "run_id": "50f7ab8488e8aab5216f363460d41b90",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:05:06.564238+00:00",
            "finish": "2025-07-04T18:05:06.564300+00:00"
          },
          "domain": "automation",
          "item_id": "climate_weather_intelligence",
          "trigger": "state of sensor.weather_forecast_today_high"
        }
      },
      {
        "extended_dict": {
          "last_step": "condition/2/entity_id/0",
          "run_id": "0a7aa5949691e6fe834e86272b77fb1f",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:05:06.564312+00:00",
            "finish": "2025-07-04T18:05:06.564349+00:00"
          },
          "domain": "automation",
          "item_id": "climate_weather_intelligence",
          "trigger": "state of sensor.weather_forecast_today_high",
          "trace": {
            "trigger/1": [
              {
                "path": "trigger/1",
                "timestamp": "2025-07-04T18:05:06.564317+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.climate_weather_intelligence",
                    "state": "on",
                    "attributes": {
                      "id": "climate_weather_intelligence",
                      "last_triggered": "2025-06-29T11:49:54.152322+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Climate Weather Intelligence"
                    },
                    "last_changed": "2025-07-04T18:04:56.733616+00:00",
                    "last_reported": "2025-07-04T18:04:56.733616+00:00",
                    "last_updated": "2025-07-04T18:04:56.733616+00:00",
                    "context": {
                      "id": "01JZB9ST0XP5EQ38RQ9DM3B56J",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "1",
                    "idx": "1",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "sensor.weather_forecast_today_high",
                    "from_state": {
                      "entity_id": "sensor.weather_forecast_today_high",
                      "state": "90.0",
                      "attributes": {
                        "forecast_available": true,
                        "precool_needed": true,
                        "hot_days_ahead": "Checking forecast...",
                        "data_source": "KAKR Weather Service (Polled)",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer-high",
                        "friendly_name": "Weather Forecast Today High"
                      },
                      "last_changed": "2025-07-04T18:05:06.561863+00:00",
                      "last_reported": "2025-07-04T18:05:06.561863+00:00",
                      "last_updated": "2025-07-04T18:05:06.561863+00:00",
                      "context": {
                        "id": "01JZB9T3KQ29W3NT4XKT8M2S0S",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "sensor.weather_forecast_today_high",
                      "state": "90.0",
                      "attributes": {
                        "forecast_available": true,
                        "precool_needed": true,
                        "hot_days_ahead": "No hot days in forecast",
                        "data_source": "KAKR Weather Service (Polled)",
                        "unit_of_measurement": "\u00b0F",
                        "icon": "mdi:thermometer-high",
                        "friendly_name": "Weather Forecast Today High"
                      },
                      "last_changed": "2025-07-04T18:05:06.561863+00:00",
                      "last_reported": "2025-07-04T18:05:06.561953+00:00",
                      "last_updated": "2025-07-04T18:05:06.561953+00:00",
                      "context": {
                        "id": "01JZB9T3KQ29W3NT4XKT8M2S0S",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of sensor.weather_forecast_today_high"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:05:06.564321+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/0/entity_id/0": [
              {
                "path": "condition/0/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.564325+00:00",
                "result": {
                  "result": true,
                  "state": "on",
                  "wanted_state": "on"
                }
              }
            ],
            "condition/1": [
              {
                "path": "condition/1",
                "timestamp": "2025-07-04T18:05:06.564332+00:00",
                "result": {
                  "result": true
                }
              }
            ],
            "condition/1/entity_id/0": [
              {
                "path": "condition/1/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.564335+00:00",
                "result": {
                  "result": true,
                  "state": "off",
                  "wanted_state": "off"
                }
              }
            ],
            "condition/2": [
              {
                "path": "condition/2",
                "timestamp": "2025-07-04T18:05:06.564341+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/2/entity_id/0": [
              {
                "path": "condition/2/entity_id/0",
                "timestamp": "2025-07-04T18:05:06.564344+00:00",
                "result": {
                  "result": false,
                  "state": "on",
                  "wanted_state": "off"
                }
              }
            ]
          },
          "config": {
            "alias": "Climate Weather Intelligence",
            "description": "Pre-cooling for hot days (6AM if forecast >86\u00b0F)",
            "id": "climate_weather_intelligence",
            "triggers": [
              {
                "platform": "time",
                "at": "06:00:00"
              },
              {
                "platform": "state",
                "entity_id": "sensor.weather_forecast_today_high"
              }
            ],
            "conditions": [
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_enabled",
                "state": "on"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_manual_override_active",
                "state": "off"
              },
              {
                "condition": "state",
                "entity_id": "input_boolean.climate_automation_coordination_lock",
                "state": "off"
              },
              {
                "condition": "time",
                "after": "06:00:00",
                "before": "08:30:00"
              }
            ],
            "actions": [
              {
                "alias": "Set Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_on"
              },
              {
                "alias": "Update Priority Automation",
                "target": {
                  "entity_id": "input_text.climate_priority_automation"
                },
                "data": {
                  "value": "weather_intelligence"
                },
                "action": "input_text.set_value"
              },
              {
                "alias": "Calculate Weather Variables",
                "variables": {
                  "outdoor_temp": "{{ states('input_number.climate_outdoor_temperature_best') | float(70) }}",
                  "current_hour": "{{ now().hour }}",
                  "today_high": "{{ states('sensor.weather_forecast_today_high') | float(80) }}",
                  "is_preconditioning_time": "{{ current_hour == 6 and today_high >= 86 and outdoor_temp < 75 }}",
                  "last_action": "{{ states('input_text.last_climate_action') }}"
                }
              },
              {
                "alias": "Execute Weather Intelligence Logic",
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ is_preconditioning_time }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ last_action != 'precooled_to_65' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Set Preconditioning Active",
                        "target": {
                          "entity_id": "input_boolean.climate_weather_preconditioning_active"
                        },
                        "action": "input_boolean.turn_on"
                      },
                      {
                        "alias": "Pre-cool to 65F",
                        "target": {
                          "entity_id": "climate.my_ecobee"
                        },
                        "data": {
                          "temperature": 65,
                          "hvac_mode": "cool"
                        },
                        "action": "climate.set_temperature"
                      },
                      {
                        "alias": "Update Last Action",
                        "target": {
                          "entity_id": "input_text.last_climate_action"
                        },
                        "data": {
                          "value": "precooled_to_65"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Weather Intelligence: Pre-cooling for {{ today_high }}\u00b0F day \u2192 Cool to 65\u00b0F"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Weather Intelligence Action",
                        "data": {
                          "name": "Climate Weather Intelligence",
                          "message": "PRE-COOL: Set to 65\u00b0F for {{ today_high }}\u00b0F forecast - Hot days: {{ states('input_text.weather_hot_days_ahead') }}"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ current_hour > 8 and states('input_boolean.climate_weather_preconditioning_active') == 'on' }}"
                      }
                    ],
                    "sequence": [
                      {
                        "alias": "Turn Off Preconditioning",
                        "target": {
                          "entity_id": "input_boolean.climate_weather_preconditioning_active"
                        },
                        "action": "input_boolean.turn_off"
                      },
                      {
                        "alias": "Update Logic Reason",
                        "target": {
                          "entity_id": "input_text.climate_logic_reason"
                        },
                        "data": {
                          "value": "Weather Intelligence: Pre-cooling period ended, resuming normal schedule"
                        },
                        "action": "input_text.set_value"
                      },
                      {
                        "alias": "Log Preconditioning End",
                        "data": {
                          "name": "Climate Weather Intelligence",
                          "message": "PRE-COOL END: Returning to normal schedule after morning pre-cooling"
                        },
                        "action": "logbook.log"
                      }
                    ]
                  }
                ]
              },
              {
                "alias": "Release Coordination Lock",
                "target": {
                  "entity_id": "input_boolean.climate_automation_coordination_lock"
                },
                "action": "input_boolean.turn_off"
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZB9T3M4BMH5874P5HYZV4E5",
            "parent_id": "01JZB9T3KQ29W3NT4XKT8M2S0S",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/2/entity_id/0",
          "run_id": "0a7aa5949691e6fe834e86272b77fb1f",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:05:06.564312+00:00",
            "finish": "2025-07-04T18:05:06.564349+00:00"
          },
          "domain": "automation",
          "item_id": "climate_weather_intelligence",
          "trigger": "state of sensor.weather_forecast_today_high"
        }
      }
    ],
    "automation.smart_bathroom_fan_owners": [
      {
        "extended_dict": {
          "last_step": "condition/0",
          "run_id": "ffc98725d307614cc18c95c7bc4871d5",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:08:28.008044+00:00",
            "finish": "2025-07-04T18:08:28.008240+00:00"
          },
          "domain": "automation",
          "item_id": "smart_bathroom_fan_owners",
          "trigger": "state of switch.owner_s_bathroom_fan",
          "trace": {
            "trigger/1": [
              {
                "path": "trigger/1",
                "timestamp": "2025-07-04T18:08:28.008083+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.smart_bathroom_fan_owner_s_bathroom",
                    "state": "on",
                    "attributes": {
                      "id": "smart_bathroom_fan_owners",
                      "last_triggered": "2025-06-06T03:30:35.207920+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Smart Bathroom Fan - Owner's Bathroom"
                    },
                    "last_changed": "2025-07-04T18:04:56.733370+00:00",
                    "last_reported": "2025-07-04T18:04:56.733370+00:00",
                    "last_updated": "2025-07-04T18:04:56.733370+00:00",
                    "context": {
                      "id": "01JZB9ST0XCX0HV5V90G6YJE01",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "fan_manual_change",
                    "idx": "1",
                    "alias": null,
                    "platform": "state",
                    "entity_id": "switch.owner_s_bathroom_fan",
                    "from_state": {
                      "entity_id": "switch.owner_s_bathroom_fan",
                      "state": "off",
                      "attributes": {
                        "friendly_name": "Owner\u2019s Bathroom Fan"
                      },
                      "last_changed": "2025-07-04T18:04:59.115009+00:00",
                      "last_reported": "2025-07-04T18:05:12.031432+00:00",
                      "last_updated": "2025-07-04T18:04:59.115009+00:00",
                      "context": {
                        "id": "01JZB9SWBBTC807FNJM672JMG7",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "switch.owner_s_bathroom_fan",
                      "state": "on",
                      "attributes": {
                        "friendly_name": "Owner\u2019s Bathroom Fan"
                      },
                      "last_changed": "2025-07-04T18:08:28.007369+00:00",
                      "last_reported": "2025-07-04T18:08:43.025553+00:00",
                      "last_updated": "2025-07-04T18:08:28.007369+00:00",
                      "context": {
                        "id": "01JZBA08B7K95NFYFCSB3TCMAK",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of switch.owner_s_bathroom_fan"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:08:28.008109+00:00",
                "result": {
                  "result": false,
                  "entities": [
                    "sensor.owner_s_bathroom_meter_humidity"
                  ]
                }
              }
            ]
          },
          "config": {
            "id": "smart_bathroom_fan_owners",
            "alias": "Smart Bathroom Fan - Owner's Bathroom",
            "description": "Comprehensive humidity control with shower detection and error handling",
            "triggers": [
              {
                "entity_id": "sensor.owner_s_bathroom_meter_humidity",
                "id": "humidity_change",
                "trigger": "state"
              },
              {
                "entity_id": "switch.owner_s_bathroom_fan",
                "id": "fan_manual_change",
                "trigger": "state"
              },
              {
                "minutes": "/5",
                "id": "periodic_check",
                "trigger": "time_pattern"
              },
              {
                "entity_id": "sensor.owner_s_bathroom_meter_humidity",
                "to": "unavailable",
                "id": "sensor_unavailable",
                "trigger": "state"
              }
            ],
            "conditions": [
              {
                "condition": "template",
                "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') not in ['unknown', 'unavailable'] }}"
              }
            ],
            "actions": [
              {
                "data": {
                  "message": "Bathroom Fan Automation triggered by: {{ trigger.id }} at {{ now().strftime('%H:%M:%S') }}",
                  "level": "info"
                },
                "action": "system_log.write"
              },
              {
                "if": [
                  {
                    "condition": "template",
                    "value_template": "{% set entities = ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] %} {{ entities | select('is_state', 'unavailable') | list | count > 0 }}\n"
                  }
                ],
                "then": [
                  {
                    "data": {
                      "title": "\ud83d\udea8 Bathroom Fan Error",
                      "message": "Critical devices offline at {{ now().strftime('%H:%M') }}: {{ ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] | select('is_state', 'unavailable') | list | join(', ') }}\n",
                      "notification_id": "bathroom_fan_error"
                    },
                    "action": "persistent_notification.create"
                  },
                  {
                    "data": {
                      "message": "Bathroom Fan automation stopped - unavailable entities: {{ ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] | select('is_state', 'unavailable') | list }}",
                      "level": "warning"
                    },
                    "action": "system_log.write"
                  },
                  {
                    "stop": "Stopping due to unavailable entities"
                  }
                ]
              },
              {
                "variables": {
                  "current_humidity": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) }}",
                  "fan_state": "{{ states('switch.owner_s_bathroom_fan') }}",
                  "current_time": "{{ now().hour }}",
                  "is_sleep_time": "{{ current_time >= 22 or current_time < 6 }}",
                  "target_humidity": "{{ 60 if is_sleep_time else 45 }}",
                  "high_humidity_threshold": "{{ 65 if is_sleep_time else 50 }}",
                  "humidity_15min_ago": "{% set timestamp_15min = (now() - timedelta(minutes=15)).isoformat() %} {% set history = states.sensor.owner_s_bathroom_meter_humidity.history(hours=1) %} {% set old_state = history | selectattr('last_changed', 'lt', timestamp_15min) | list | last %} {{ old_state.state | float(current_humidity) if old_state else current_humidity }}\n",
                  "humidity_change_15min": "{{ current_humidity - humidity_15min_ago }}",
                  "sensor_last_update": "{{ (now() - states.sensor.owner_s_bathroom_meter_humidity.last_changed).total_seconds() }}",
                  "sensor_responsive": "{{ sensor_last_update < 1800 }}"
                }
              },
              {
                "data": {
                  "message": "Bathroom Fan Status: Humidity={{ current_humidity }}%, Fan={{ fan_state }},  Target={{ target_humidity }}%, Sleep={{ is_sleep_time }},  15min Change={{ humidity_change_15min | round(1) }}%,  Sensor Age={{ (sensor_last_update/60) | round(1) }}min\n",
                  "level": "info"
                },
                "action": "system_log.write"
              },
              {
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > 80 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_on"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udca8 Emergency Fan Activation",
                          "message": "Humidity {{ current_humidity }}% detected at {{ now().strftime('%H:%M') }} - Fan activated for safety",
                          "notification_id": "bathroom_fan_emergency"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "EMERGENCY: Fan activated due to {{ current_humidity }}% humidity",
                          "level": "warning"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "wait_template": "{{ is_state('switch.owner_s_bathroom_fan', 'on') }}",
                        "timeout": "00:00:10",
                        "continue_on_timeout": true
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ humidity_change_15min >= 5 and current_humidity > target_humidity }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_on"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udebf Shower Detected",
                          "message": "Humidity rose {{ humidity_change_15min | round(1) }}% to {{ current_humidity }}% -  Fan will run until {{ target_humidity }}%\n",
                          "notification_id": "bathroom_fan_shower"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "SHOWER DETECTED: {{ humidity_change_15min | round(1) }}% rise - Fan activated",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > high_humidity_threshold }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "SWITCH RECOVERY: Fan returned online with {{ current_humidity }}% humidity - maintaining operation",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udd04 Fan Recovery Mode",
                          "message": "Fan reconnected at {{ current_humidity }}% humidity - will run for 30min minimum",
                          "notification_id": "bathroom_fan_recovery"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "delay": "00:30:00"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'off' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > 60 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "MANUAL OVERRIDE: Fan turned off at {{ current_humidity }}% - waiting 5min before override",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:05:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) > 60 }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_on"
                          },
                          {
                            "data": {
                              "title": "\u26a0\ufe0f Fan Override Protection",
                              "message": "Fan reactivated - humidity still {{ states('sensor.owner_s_bathroom_meter_humidity') }}% after manual shutoff",
                              "notification_id": "bathroom_fan_override"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "OVERRIDE PROTECTION: Fan reactivated due to {{ states('sensor.owner_s_bathroom_meter_humidity') }}% humidity",
                              "level": "warning"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity <= target_humidity + 5 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "MANUAL FAN: 30-minute auto-off timer started at {{ current_humidity }}% humidity",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:30:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{% set current = states('sensor.owner_s_bathroom_meter_humidity') | float(0) %} {% set change = current - current_humidity %} {{ change < 5 and current <= (target_humidity + 10) }}\n"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\ud83d\udca9 PoopFan Auto-Off",
                              "message": "30-minute timer expired - PoopFan turned off automatically",
                              "notification_id": "bathroom_fan_autooff"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "MANUAL AUTO-OFF: 30-minute timer completed, fan turned off",
                              "level": "info"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ fan_state == 'on' and current_humidity <= target_humidity }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "TARGET REACHED: {{ current_humidity }}% <= {{ target_humidity }}% - starting 20min buffer period",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:20:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) <= target_humidity }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\u2705 Fan Safely Turned Off",
                              "message": "Humidity {{ states('sensor.owner_s_bathroom_meter_humidity') }}% - target {{ target_humidity }}% maintained",
                              "notification_id": "bathroom_fan_complete"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "NORMAL SHUTDOWN: Target humidity maintained, fan turned off",
                              "level": "info"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "SAFETY MONITORING: Fan running with responsive sensor - 6hr safety timeout active",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "06:00:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('switch.owner_s_bathroom_fan') == 'on' }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\u23f0 Safety Timeout",
                              "message": "Fan automatically turned off after 6 hours - check humidity sensor",
                              "notification_id": "bathroom_fan_timeout"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "SAFETY TIMEOUT: Fan turned off after 6 hours of operation",
                              "level": "warning"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ not sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_off"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udea8 Sensor Failure Detected",
                          "message": "Humidity sensor unresponsive for {{ (sensor_last_update/60) | round(0) }} minutes - fan stopped for safety",
                          "notification_id": "bathroom_fan_sensor_fail"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "SENSOR FAILURE: No updates for {{ (sensor_last_update/60) | round(0) }} minutes - automation stopped",
                          "level": "error"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "stop": "Sensor unresponsive - stopping automation for safety"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "data": {
                      "message": "MONITORING: No action needed - Humidity={{ current_humidity }}%,  Fan={{ fan_state }}, Target={{ target_humidity }}%,  Change15min={{ humidity_change_15min | round(1) }}%\n",
                      "level": "debug"
                    },
                    "action": "system_log.write"
                  }
                ]
              }
            ],
            "mode": "single",
            "max_exceeded": "silent"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZBA08B8SWJW9394XHJ44SSX",
            "parent_id": "01JZBA08B7K95NFYFCSB3TCMAK",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/0",
          "run_id": "ffc98725d307614cc18c95c7bc4871d5",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:08:28.008044+00:00",
            "finish": "2025-07-04T18:08:28.008240+00:00"
          },
          "domain": "automation",
          "item_id": "smart_bathroom_fan_owners",
          "trigger": "state of switch.owner_s_bathroom_fan"
        }
      },
      {
        "extended_dict": {
          "last_step": "condition/0",
          "run_id": "321187092b8b566b1b7383f44723238f",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:10:00.380013+00:00",
            "finish": "2025-07-04T18:10:00.380240+00:00"
          },
          "domain": "automation",
          "item_id": "smart_bathroom_fan_owners",
          "trigger": "time pattern",
          "trace": {
            "trigger/2": [
              {
                "path": "trigger/2",
                "timestamp": "2025-07-04T18:10:00.380062+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.smart_bathroom_fan_owner_s_bathroom",
                    "state": "on",
                    "attributes": {
                      "id": "smart_bathroom_fan_owners",
                      "last_triggered": "2025-06-06T03:30:35.207920+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Smart Bathroom Fan - Owner's Bathroom"
                    },
                    "last_changed": "2025-07-04T18:04:56.733370+00:00",
                    "last_reported": "2025-07-04T18:04:56.733370+00:00",
                    "last_updated": "2025-07-04T18:04:56.733370+00:00",
                    "context": {
                      "id": "01JZB9ST0XCX0HV5V90G6YJE01",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "periodic_check",
                    "idx": "2",
                    "alias": null,
                    "platform": "time_pattern",
                    "now": "2025-07-04T14:10:00.378713-04:00",
                    "description": "time pattern"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:10:00.380097+00:00",
                "result": {
                  "result": false,
                  "entities": [
                    "sensor.owner_s_bathroom_meter_humidity"
                  ]
                }
              }
            ]
          },
          "config": {
            "id": "smart_bathroom_fan_owners",
            "alias": "Smart Bathroom Fan - Owner's Bathroom",
            "description": "Comprehensive humidity control with shower detection and error handling",
            "triggers": [
              {
                "entity_id": "sensor.owner_s_bathroom_meter_humidity",
                "id": "humidity_change",
                "trigger": "state"
              },
              {
                "entity_id": "switch.owner_s_bathroom_fan",
                "id": "fan_manual_change",
                "trigger": "state"
              },
              {
                "minutes": "/5",
                "id": "periodic_check",
                "trigger": "time_pattern"
              },
              {
                "entity_id": "sensor.owner_s_bathroom_meter_humidity",
                "to": "unavailable",
                "id": "sensor_unavailable",
                "trigger": "state"
              }
            ],
            "conditions": [
              {
                "condition": "template",
                "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') not in ['unknown', 'unavailable'] }}"
              }
            ],
            "actions": [
              {
                "data": {
                  "message": "Bathroom Fan Automation triggered by: {{ trigger.id }} at {{ now().strftime('%H:%M:%S') }}",
                  "level": "info"
                },
                "action": "system_log.write"
              },
              {
                "if": [
                  {
                    "condition": "template",
                    "value_template": "{% set entities = ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] %} {{ entities | select('is_state', 'unavailable') | list | count > 0 }}\n"
                  }
                ],
                "then": [
                  {
                    "data": {
                      "title": "\ud83d\udea8 Bathroom Fan Error",
                      "message": "Critical devices offline at {{ now().strftime('%H:%M') }}: {{ ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] | select('is_state', 'unavailable') | list | join(', ') }}\n",
                      "notification_id": "bathroom_fan_error"
                    },
                    "action": "persistent_notification.create"
                  },
                  {
                    "data": {
                      "message": "Bathroom Fan automation stopped - unavailable entities: {{ ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] | select('is_state', 'unavailable') | list }}",
                      "level": "warning"
                    },
                    "action": "system_log.write"
                  },
                  {
                    "stop": "Stopping due to unavailable entities"
                  }
                ]
              },
              {
                "variables": {
                  "current_humidity": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) }}",
                  "fan_state": "{{ states('switch.owner_s_bathroom_fan') }}",
                  "current_time": "{{ now().hour }}",
                  "is_sleep_time": "{{ current_time >= 22 or current_time < 6 }}",
                  "target_humidity": "{{ 60 if is_sleep_time else 45 }}",
                  "high_humidity_threshold": "{{ 65 if is_sleep_time else 50 }}",
                  "humidity_15min_ago": "{% set timestamp_15min = (now() - timedelta(minutes=15)).isoformat() %} {% set history = states.sensor.owner_s_bathroom_meter_humidity.history(hours=1) %} {% set old_state = history | selectattr('last_changed', 'lt', timestamp_15min) | list | last %} {{ old_state.state | float(current_humidity) if old_state else current_humidity }}\n",
                  "humidity_change_15min": "{{ current_humidity - humidity_15min_ago }}",
                  "sensor_last_update": "{{ (now() - states.sensor.owner_s_bathroom_meter_humidity.last_changed).total_seconds() }}",
                  "sensor_responsive": "{{ sensor_last_update < 1800 }}"
                }
              },
              {
                "data": {
                  "message": "Bathroom Fan Status: Humidity={{ current_humidity }}%, Fan={{ fan_state }},  Target={{ target_humidity }}%, Sleep={{ is_sleep_time }},  15min Change={{ humidity_change_15min | round(1) }}%,  Sensor Age={{ (sensor_last_update/60) | round(1) }}min\n",
                  "level": "info"
                },
                "action": "system_log.write"
              },
              {
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > 80 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_on"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udca8 Emergency Fan Activation",
                          "message": "Humidity {{ current_humidity }}% detected at {{ now().strftime('%H:%M') }} - Fan activated for safety",
                          "notification_id": "bathroom_fan_emergency"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "EMERGENCY: Fan activated due to {{ current_humidity }}% humidity",
                          "level": "warning"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "wait_template": "{{ is_state('switch.owner_s_bathroom_fan', 'on') }}",
                        "timeout": "00:00:10",
                        "continue_on_timeout": true
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ humidity_change_15min >= 5 and current_humidity > target_humidity }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_on"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udebf Shower Detected",
                          "message": "Humidity rose {{ humidity_change_15min | round(1) }}% to {{ current_humidity }}% -  Fan will run until {{ target_humidity }}%\n",
                          "notification_id": "bathroom_fan_shower"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "SHOWER DETECTED: {{ humidity_change_15min | round(1) }}% rise - Fan activated",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > high_humidity_threshold }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "SWITCH RECOVERY: Fan returned online with {{ current_humidity }}% humidity - maintaining operation",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udd04 Fan Recovery Mode",
                          "message": "Fan reconnected at {{ current_humidity }}% humidity - will run for 30min minimum",
                          "notification_id": "bathroom_fan_recovery"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "delay": "00:30:00"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'off' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > 60 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "MANUAL OVERRIDE: Fan turned off at {{ current_humidity }}% - waiting 5min before override",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:05:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) > 60 }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_on"
                          },
                          {
                            "data": {
                              "title": "\u26a0\ufe0f Fan Override Protection",
                              "message": "Fan reactivated - humidity still {{ states('sensor.owner_s_bathroom_meter_humidity') }}% after manual shutoff",
                              "notification_id": "bathroom_fan_override"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "OVERRIDE PROTECTION: Fan reactivated due to {{ states('sensor.owner_s_bathroom_meter_humidity') }}% humidity",
                              "level": "warning"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity <= target_humidity + 5 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "MANUAL FAN: 30-minute auto-off timer started at {{ current_humidity }}% humidity",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:30:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{% set current = states('sensor.owner_s_bathroom_meter_humidity') | float(0) %} {% set change = current - current_humidity %} {{ change < 5 and current <= (target_humidity + 10) }}\n"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\ud83d\udca9 PoopFan Auto-Off",
                              "message": "30-minute timer expired - PoopFan turned off automatically",
                              "notification_id": "bathroom_fan_autooff"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "MANUAL AUTO-OFF: 30-minute timer completed, fan turned off",
                              "level": "info"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ fan_state == 'on' and current_humidity <= target_humidity }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "TARGET REACHED: {{ current_humidity }}% <= {{ target_humidity }}% - starting 20min buffer period",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:20:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) <= target_humidity }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\u2705 Fan Safely Turned Off",
                              "message": "Humidity {{ states('sensor.owner_s_bathroom_meter_humidity') }}% - target {{ target_humidity }}% maintained",
                              "notification_id": "bathroom_fan_complete"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "NORMAL SHUTDOWN: Target humidity maintained, fan turned off",
                              "level": "info"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "SAFETY MONITORING: Fan running with responsive sensor - 6hr safety timeout active",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "06:00:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('switch.owner_s_bathroom_fan') == 'on' }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\u23f0 Safety Timeout",
                              "message": "Fan automatically turned off after 6 hours - check humidity sensor",
                              "notification_id": "bathroom_fan_timeout"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "SAFETY TIMEOUT: Fan turned off after 6 hours of operation",
                              "level": "warning"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ not sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_off"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udea8 Sensor Failure Detected",
                          "message": "Humidity sensor unresponsive for {{ (sensor_last_update/60) | round(0) }} minutes - fan stopped for safety",
                          "notification_id": "bathroom_fan_sensor_fail"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "SENSOR FAILURE: No updates for {{ (sensor_last_update/60) | round(0) }} minutes - automation stopped",
                          "level": "error"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "stop": "Sensor unresponsive - stopping automation for safety"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "data": {
                      "message": "MONITORING: No action needed - Humidity={{ current_humidity }}%,  Fan={{ fan_state }}, Target={{ target_humidity }}%,  Change15min={{ humidity_change_15min | round(1) }}%\n",
                      "level": "debug"
                    },
                    "action": "system_log.write"
                  }
                ]
              }
            ],
            "mode": "single",
            "max_exceeded": "silent"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZBA32HV5QSB7Z2WVGHFJQ4Q",
            "parent_id": null,
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/0",
          "run_id": "321187092b8b566b1b7383f44723238f",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:10:00.380013+00:00",
            "finish": "2025-07-04T18:10:00.380240+00:00"
          },
          "domain": "automation",
          "item_id": "smart_bathroom_fan_owners",
          "trigger": "time pattern"
        }
      },
      {
        "extended_dict": {
          "last_step": "condition/0",
          "run_id": "32933535c2edb378ca52f24654f4cf18",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:15:00.373478+00:00",
            "finish": "2025-07-04T18:15:00.374261+00:00"
          },
          "domain": "automation",
          "item_id": "smart_bathroom_fan_owners",
          "trigger": "time pattern",
          "trace": {
            "trigger/2": [
              {
                "path": "trigger/2",
                "timestamp": "2025-07-04T18:15:00.373596+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.smart_bathroom_fan_owner_s_bathroom",
                    "state": "on",
                    "attributes": {
                      "id": "smart_bathroom_fan_owners",
                      "last_triggered": "2025-06-06T03:30:35.207920+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Smart Bathroom Fan - Owner's Bathroom"
                    },
                    "last_changed": "2025-07-04T18:04:56.733370+00:00",
                    "last_reported": "2025-07-04T18:04:56.733370+00:00",
                    "last_updated": "2025-07-04T18:04:56.733370+00:00",
                    "context": {
                      "id": "01JZB9ST0XCX0HV5V90G6YJE01",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "periodic_check",
                    "idx": "2",
                    "alias": null,
                    "platform": "time_pattern",
                    "now": "2025-07-04T14:15:00.372850-04:00",
                    "description": "time pattern"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:15:00.373676+00:00",
                "result": {
                  "result": false,
                  "entities": [
                    "sensor.owner_s_bathroom_meter_humidity"
                  ]
                }
              }
            ]
          },
          "config": {
            "id": "smart_bathroom_fan_owners",
            "alias": "Smart Bathroom Fan - Owner's Bathroom",
            "description": "Comprehensive humidity control with shower detection and error handling",
            "triggers": [
              {
                "entity_id": "sensor.owner_s_bathroom_meter_humidity",
                "id": "humidity_change",
                "trigger": "state"
              },
              {
                "entity_id": "switch.owner_s_bathroom_fan",
                "id": "fan_manual_change",
                "trigger": "state"
              },
              {
                "minutes": "/5",
                "id": "periodic_check",
                "trigger": "time_pattern"
              },
              {
                "entity_id": "sensor.owner_s_bathroom_meter_humidity",
                "to": "unavailable",
                "id": "sensor_unavailable",
                "trigger": "state"
              }
            ],
            "conditions": [
              {
                "condition": "template",
                "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') not in ['unknown', 'unavailable'] }}"
              }
            ],
            "actions": [
              {
                "data": {
                  "message": "Bathroom Fan Automation triggered by: {{ trigger.id }} at {{ now().strftime('%H:%M:%S') }}",
                  "level": "info"
                },
                "action": "system_log.write"
              },
              {
                "if": [
                  {
                    "condition": "template",
                    "value_template": "{% set entities = ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] %} {{ entities | select('is_state', 'unavailable') | list | count > 0 }}\n"
                  }
                ],
                "then": [
                  {
                    "data": {
                      "title": "\ud83d\udea8 Bathroom Fan Error",
                      "message": "Critical devices offline at {{ now().strftime('%H:%M') }}: {{ ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] | select('is_state', 'unavailable') | list | join(', ') }}\n",
                      "notification_id": "bathroom_fan_error"
                    },
                    "action": "persistent_notification.create"
                  },
                  {
                    "data": {
                      "message": "Bathroom Fan automation stopped - unavailable entities: {{ ['sensor.owner_s_bathroom_meter_humidity', 'switch.owner_s_bathroom_fan'] | select('is_state', 'unavailable') | list }}",
                      "level": "warning"
                    },
                    "action": "system_log.write"
                  },
                  {
                    "stop": "Stopping due to unavailable entities"
                  }
                ]
              },
              {
                "variables": {
                  "current_humidity": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) }}",
                  "fan_state": "{{ states('switch.owner_s_bathroom_fan') }}",
                  "current_time": "{{ now().hour }}",
                  "is_sleep_time": "{{ current_time >= 22 or current_time < 6 }}",
                  "target_humidity": "{{ 60 if is_sleep_time else 45 }}",
                  "high_humidity_threshold": "{{ 65 if is_sleep_time else 50 }}",
                  "humidity_15min_ago": "{% set timestamp_15min = (now() - timedelta(minutes=15)).isoformat() %} {% set history = states.sensor.owner_s_bathroom_meter_humidity.history(hours=1) %} {% set old_state = history | selectattr('last_changed', 'lt', timestamp_15min) | list | last %} {{ old_state.state | float(current_humidity) if old_state else current_humidity }}\n",
                  "humidity_change_15min": "{{ current_humidity - humidity_15min_ago }}",
                  "sensor_last_update": "{{ (now() - states.sensor.owner_s_bathroom_meter_humidity.last_changed).total_seconds() }}",
                  "sensor_responsive": "{{ sensor_last_update < 1800 }}"
                }
              },
              {
                "data": {
                  "message": "Bathroom Fan Status: Humidity={{ current_humidity }}%, Fan={{ fan_state }},  Target={{ target_humidity }}%, Sleep={{ is_sleep_time }},  15min Change={{ humidity_change_15min | round(1) }}%,  Sensor Age={{ (sensor_last_update/60) | round(1) }}min\n",
                  "level": "info"
                },
                "action": "system_log.write"
              },
              {
                "choose": [
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > 80 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_on"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udca8 Emergency Fan Activation",
                          "message": "Humidity {{ current_humidity }}% detected at {{ now().strftime('%H:%M') }} - Fan activated for safety",
                          "notification_id": "bathroom_fan_emergency"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "EMERGENCY: Fan activated due to {{ current_humidity }}% humidity",
                          "level": "warning"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "wait_template": "{{ is_state('switch.owner_s_bathroom_fan', 'on') }}",
                        "timeout": "00:00:10",
                        "continue_on_timeout": true
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ humidity_change_15min >= 5 and current_humidity > target_humidity }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_on"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udebf Shower Detected",
                          "message": "Humidity rose {{ humidity_change_15min | round(1) }}% to {{ current_humidity }}% -  Fan will run until {{ target_humidity }}%\n",
                          "notification_id": "bathroom_fan_shower"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "SHOWER DETECTED: {{ humidity_change_15min | round(1) }}% rise - Fan activated",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > high_humidity_threshold }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "SWITCH RECOVERY: Fan returned online with {{ current_humidity }}% humidity - maintaining operation",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udd04 Fan Recovery Mode",
                          "message": "Fan reconnected at {{ current_humidity }}% humidity - will run for 30min minimum",
                          "notification_id": "bathroom_fan_recovery"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "delay": "00:30:00"
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'off' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity > 60 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "MANUAL OVERRIDE: Fan turned off at {{ current_humidity }}% - waiting 5min before override",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:05:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) > 60 }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_on"
                          },
                          {
                            "data": {
                              "title": "\u26a0\ufe0f Fan Override Protection",
                              "message": "Fan reactivated - humidity still {{ states('sensor.owner_s_bathroom_meter_humidity') }}% after manual shutoff",
                              "notification_id": "bathroom_fan_override"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "OVERRIDE PROTECTION: Fan reactivated due to {{ states('sensor.owner_s_bathroom_meter_humidity') }}% humidity",
                              "level": "warning"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ trigger.id == 'fan_manual_change' and fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ current_humidity <= target_humidity + 5 }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "MANUAL FAN: 30-minute auto-off timer started at {{ current_humidity }}% humidity",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:30:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{% set current = states('sensor.owner_s_bathroom_meter_humidity') | float(0) %} {% set change = current - current_humidity %} {{ change < 5 and current <= (target_humidity + 10) }}\n"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\ud83d\udca9 PoopFan Auto-Off",
                              "message": "30-minute timer expired - PoopFan turned off automatically",
                              "notification_id": "bathroom_fan_autooff"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "MANUAL AUTO-OFF: 30-minute timer completed, fan turned off",
                              "level": "info"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ fan_state == 'on' and current_humidity <= target_humidity }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "TARGET REACHED: {{ current_humidity }}% <= {{ target_humidity }}% - starting 20min buffer period",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "00:20:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('sensor.owner_s_bathroom_meter_humidity') | float(0) <= target_humidity }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\u2705 Fan Safely Turned Off",
                              "message": "Humidity {{ states('sensor.owner_s_bathroom_meter_humidity') }}% - target {{ target_humidity }}% maintained",
                              "notification_id": "bathroom_fan_complete"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "NORMAL SHUTDOWN: Target humidity maintained, fan turned off",
                              "level": "info"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ fan_state == 'on' }}"
                      },
                      {
                        "condition": "template",
                        "value_template": "{{ sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "data": {
                          "message": "SAFETY MONITORING: Fan running with responsive sensor - 6hr safety timeout active",
                          "level": "info"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "delay": "06:00:00"
                      },
                      {
                        "if": [
                          {
                            "condition": "template",
                            "value_template": "{{ states('switch.owner_s_bathroom_fan') == 'on' }}"
                          }
                        ],
                        "then": [
                          {
                            "target": {
                              "entity_id": "switch.owner_s_bathroom_fan"
                            },
                            "data": {},
                            "action": "switch.turn_off"
                          },
                          {
                            "data": {
                              "title": "\u23f0 Safety Timeout",
                              "message": "Fan automatically turned off after 6 hours - check humidity sensor",
                              "notification_id": "bathroom_fan_timeout"
                            },
                            "action": "persistent_notification.create"
                          },
                          {
                            "data": {
                              "message": "SAFETY TIMEOUT: Fan turned off after 6 hours of operation",
                              "level": "warning"
                            },
                            "action": "system_log.write"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "conditions": [
                      {
                        "condition": "template",
                        "value_template": "{{ not sensor_responsive }}"
                      }
                    ],
                    "sequence": [
                      {
                        "target": {
                          "entity_id": "switch.owner_s_bathroom_fan"
                        },
                        "data": {},
                        "action": "switch.turn_off"
                      },
                      {
                        "data": {
                          "title": "\ud83d\udea8 Sensor Failure Detected",
                          "message": "Humidity sensor unresponsive for {{ (sensor_last_update/60) | round(0) }} minutes - fan stopped for safety",
                          "notification_id": "bathroom_fan_sensor_fail"
                        },
                        "action": "persistent_notification.create"
                      },
                      {
                        "data": {
                          "message": "SENSOR FAILURE: No updates for {{ (sensor_last_update/60) | round(0) }} minutes - automation stopped",
                          "level": "error"
                        },
                        "action": "system_log.write"
                      },
                      {
                        "stop": "Sensor unresponsive - stopping automation for safety"
                      }
                    ]
                  }
                ],
                "default": [
                  {
                    "data": {
                      "message": "MONITORING: No action needed - Humidity={{ current_humidity }}%,  Fan={{ fan_state }}, Target={{ target_humidity }}%,  Change15min={{ humidity_change_15min | round(1) }}%\n",
                      "level": "debug"
                    },
                    "action": "system_log.write"
                  }
                ]
              }
            ],
            "mode": "single",
            "max_exceeded": "silent"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZBAC7GNPVYQ8MZQPND5KZH4",
            "parent_id": null,
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/0",
          "run_id": "32933535c2edb378ca52f24654f4cf18",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:15:00.373478+00:00",
            "finish": "2025-07-04T18:15:00.374261+00:00"
          },
          "domain": "automation",
          "item_id": "smart_bathroom_fan_owners",
          "trigger": "time pattern"
        }
      }
    ],
    "automation.1748299761204": [
      {
        "extended_dict": {
          "last_step": "condition/0/conditions/1",
          "run_id": "44ab689ce0bc0f27ca540de7b2b9a553",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:09:10.387098+00:00",
            "finish": "2025-07-04T18:09:10.387169+00:00"
          },
          "domain": "automation",
          "item_id": "1748299761204",
          "trigger": "state of binary_sensor.contact_office_door_door",
          "trace": {
            "trigger/0": [
              {
                "path": "trigger/0",
                "timestamp": "2025-07-04T18:09:10.387119+00:00",
                "changed_variables": {
                  "this": {
                    "entity_id": "automation.office_alarm",
                    "state": "on",
                    "attributes": {
                      "id": "1748299761204",
                      "last_triggered": "2025-07-02T05:13:32.952746+00:00",
                      "mode": "single",
                      "current": 0,
                      "friendly_name": "Office Alarm"
                    },
                    "last_changed": "2025-07-04T18:04:56.733154+00:00",
                    "last_reported": "2025-07-04T18:04:56.733154+00:00",
                    "last_updated": "2025-07-04T18:04:56.733154+00:00",
                    "context": {
                      "id": "01JZB9ST0XBXD7ENA56BAJX3P5",
                      "parent_id": null,
                      "user_id": null
                    }
                  },
                  "trigger": {
                    "id": "0",
                    "idx": "0",
                    "alias": null,
                    "platform": "device",
                    "entity_id": "binary_sensor.contact_office_door_door",
                    "from_state": {
                      "entity_id": "binary_sensor.contact_office_door_door",
                      "state": "unavailable",
                      "attributes": {
                        "device_class": "door",
                        "friendly_name": "Contact - Office Door Door"
                      },
                      "last_changed": "2025-07-04T18:04:51.007390+00:00",
                      "last_reported": "2025-07-04T18:04:51.007390+00:00",
                      "last_updated": "2025-07-04T18:04:51.007390+00:00",
                      "context": {
                        "id": "01JZB9SMDZHFHDG0N1WEQ4XH4X",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "to_state": {
                      "entity_id": "binary_sensor.contact_office_door_door",
                      "state": "on",
                      "attributes": {
                        "device_class": "door",
                        "friendly_name": "Contact - Office Door Door"
                      },
                      "last_changed": "2025-07-04T18:09:10.385400+00:00",
                      "last_reported": "2025-07-04T18:09:10.385400+00:00",
                      "last_updated": "2025-07-04T18:09:10.385400+00:00",
                      "context": {
                        "id": "01JZBA1HQHZY2MM8PMD6M5E3V3",
                        "parent_id": null,
                        "user_id": null
                      }
                    },
                    "for": null,
                    "attribute": null,
                    "description": "state of binary_sensor.contact_office_door_door"
                  }
                }
              }
            ],
            "condition/0": [
              {
                "path": "condition/0",
                "timestamp": "2025-07-04T18:09:10.387131+00:00",
                "result": {
                  "result": false
                }
              }
            ],
            "condition/0/conditions/0": [
              {
                "path": "condition/0/conditions/0",
                "timestamp": "2025-07-04T18:09:10.387139+00:00",
                "result": {
                  "after": {
                    "__type": "<class 'datetime.time'>",
                    "isoformat": "21:00:00"
                  },
                  "now_time": {
                    "__type": "<class 'datetime.time'>",
                    "isoformat": "14:09:10.387145"
                  },
                  "before": {
                    "__type": "<class 'datetime.time'>",
                    "isoformat": "07:00:00"
                  },
                  "result": false
                }
              }
            ],
            "condition/0/conditions/1": [
              {
                "path": "condition/0/conditions/1",
                "timestamp": "2025-07-04T18:09:10.387158+00:00",
                "result": {
                  "after": {
                    "__type": "<class 'datetime.time'>",
                    "isoformat": "00:00:00"
                  },
                  "now_time": {
                    "__type": "<class 'datetime.time'>",
                    "isoformat": "14:09:10.387161"
                  },
                  "before": {
                    "__type": "<class 'datetime.time'>",
                    "isoformat": "11:59:59"
                  },
                  "result": false
                }
              }
            ]
          },
          "config": {
            "id": "1748299761204",
            "alias": "Office Alarm",
            "description": "",
            "triggers": [
              {
                "type": "opened",
                "device_id": "f85823fcd1cca60d5b1ad26ab8b3b792",
                "entity_id": "0476636bae9d382767b612b915021851",
                "domain": "binary_sensor",
                "metadata": {
                  "secondary": false
                },
                "trigger": "device"
              }
            ],
            "conditions": [
              {
                "condition": "or",
                "conditions": [
                  {
                    "condition": "time",
                    "after": "21:00:00",
                    "before": "07:00:00",
                    "weekday": [
                      "mon",
                      "tue",
                      "wed",
                      "thu",
                      "fri"
                    ]
                  },
                  {
                    "condition": "time",
                    "after": "00:00:00",
                    "before": "11:59:59",
                    "weekday": [
                      "sun",
                      "sat"
                    ]
                  }
                ]
              }
            ],
            "actions": [
              {
                "action": "siren.turn_on",
                "metadata": {},
                "data": {},
                "target": {
                  "device_id": [
                    "cae42d216c4abd335b017493f1683f50",
                    "f27249ac282fb103d1b9e317b1484586"
                  ]
                }
              },
              {
                "delay": {
                  "hours": 0,
                  "minutes": 0,
                  "seconds": 3,
                  "milliseconds": 0
                }
              },
              {
                "action": "siren.turn_off",
                "metadata": {},
                "data": {},
                "target": {
                  "device_id": [
                    "cae42d216c4abd335b017493f1683f50",
                    "f27249ac282fb103d1b9e317b1484586"
                  ]
                }
              }
            ],
            "mode": "single"
          },
          "blueprint_inputs": null,
          "context": {
            "id": "01JZBA1HQKK4WX0NT46NP8188G",
            "parent_id": "01JZBA1HQHZY2MM8PMD6M5E3V3",
            "user_id": null
          }
        },
        "short_dict": {
          "last_step": "condition/0/conditions/1",
          "run_id": "44ab689ce0bc0f27ca540de7b2b9a553",
          "state": "stopped",
          "script_execution": "failed_conditions",
          "timestamp": {
            "start": "2025-07-04T18:09:10.387098+00:00",
            "finish": "2025-07-04T18:09:10.387169+00:00"
          },
          "domain": "automation",
          "item_id": "1748299761204",
          "trigger": "state of binary_sensor.contact_office_door_door"
        }
      }
    ]
  }
}